{
  "address": "0x1E5495b0a925435eb1F031F26420384Abd19a0Ac",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lendingCompoundFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowingCompoundFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentMaturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMaturity",
          "type": "uint256"
        }
      ],
      "name": "AutoRollExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "int256",
          "name": "_balance",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_fromMaturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toMaturity",
          "type": "uint256"
        }
      ],
      "name": "calculateBalanceFluctuationByAutoRolls",
      "outputs": [
        {
          "internalType": "int256",
          "name": "fluctuation",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_basisMaturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_destinationMaturity",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_futureValue",
          "type": "int256"
        }
      ],
      "name": "calculateFVFromFV",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_basisMaturity",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_genesisValue",
          "type": "int256"
        }
      ],
      "name": "calculateFVFromGV",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_basisMaturity",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_futureValue",
          "type": "int256"
        }
      ],
      "name": "calculateGVFromFV",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "cleanUpGenesisValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nextMaturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalFVAmount",
          "type": "uint256"
        }
      ],
      "name": "executeAutoRoll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getAutoRollLog",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lendingCompoundFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowingCompoundFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "next",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prev",
              "type": "uint256"
            }
          ],
          "internalType": "struct AutoRollLog",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getBalanceFluctuationByAutoRolls",
      "outputs": [
        {
          "internalType": "int256",
          "name": "fluctuation",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getBorrowingCompoundFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCurrentMaturity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getGenesisValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getGenesisValueInFutureValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getLatestAutoRollLog",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lendingCompoundFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowingCompoundFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "next",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prev",
              "type": "uint256"
            }
          ],
          "internalType": "struct AutoRollLog",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getLendingCompoundFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getMaturityGenesisValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getTotalBorrowingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getTotalLendingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_compoundFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "initializeCurrencySetting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_maximumGVAmount",
          "type": "int256"
        }
      ],
      "name": "offsetGenesisValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "offsetAmount",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_basisMaturity",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_fvAmount",
          "type": "int256"
        }
      ],
      "name": "updateGenesisValueWithFutureValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_basisMaturity",
          "type": "uint256"
        }
      ],
      "name": "updateGenesisValueWithResidualAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        }
      ],
      "name": "updateInitialCompoundFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0c6b9e726d6a9c5ec841235a76c3ee82b0e4023ab8c93b81df5906ddf5776999",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xe3658624A3Aafa064357741Df90d0df52368983F",
    "transactionIndex": 35,
    "gasUsed": "2681764",
    "logsBloom": "0x
    "blockHash": "0xa03ce12aa3a5a883d3e3de842ac47a5d85b5ff470f7f19cf51d20030f05ecd58",
    "transactionHash": "0x0c6b9e726d6a9c5ec841235a76c3ee82b0e4023ab8c93b81df5906ddf5776999",
    "logs": [],
    "blockNumber": 8810367,
    "cumulativeGasUsed": "6881590",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3f85b78d4f02b33ea339ac5a99716c70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lendingCompoundFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowingCompoundFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentMaturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMaturity\",\"type\":\"uint256\"}],\"name\":\"AutoRollExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"_balance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_fromMaturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toMaturity\",\"type\":\"uint256\"}],\"name\":\"calculateBalanceFluctuationByAutoRolls\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"fluctuation\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_basisMaturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_destinationMaturity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_futureValue\",\"type\":\"int256\"}],\"name\":\"calculateFVFromFV\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_basisMaturity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_genesisValue\",\"type\":\"int256\"}],\"name\":\"calculateFVFromGV\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_basisMaturity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_futureValue\",\"type\":\"int256\"}],\"name\":\"calculateGVFromFV\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"cleanUpGenesisValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextMaturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalFVAmount\",\"type\":\"uint256\"}],\"name\":\"executeAutoRoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getAutoRollLog\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingCompoundFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowingCompoundFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prev\",\"type\":\"uint256\"}],\"internalType\":\"struct AutoRollLog\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getBalanceFluctuationByAutoRolls\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"fluctuation\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getBorrowingCompoundFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getCurrentMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getGenesisValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getGenesisValueInFutureValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getLatestAutoRollLog\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingCompoundFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowingCompoundFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prev\",\"type\":\"uint256\"}],\"internalType\":\"struct AutoRollLog\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getLendingCompoundFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getMaturityGenesisValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getTotalBorrowingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getTotalLendingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_compoundFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"initializeCurrencySetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_maximumGVAmount\",\"type\":\"int256\"}],\"name\":\"offsetGenesisValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"offsetAmount\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_basisMaturity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_fvAmount\",\"type\":\"int256\"}],\"name\":\"updateGenesisValueWithFutureValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_basisMaturity\",\"type\":\"uint256\"}],\"name\":\"updateGenesisValueWithResidualAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"updateInitialCompoundFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"The contact name listed in this method is also needed to be listed `requiredContracts` method.\"},\"initialize(address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_resolver\":\"The address of the Address Resolver contract\"}},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptedContracts()\":{\"notice\":\"Returns contract names that can call this contract.\"},\"initialize(address)\":{\"notice\":\"Initializes the contract.\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"}},\"notice\":\"Implements the management of the genesis value as an amount for Lending deals.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GenesisValueVault.sol\":\"GenesisValueVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/GenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n// interfaces\\nimport {IGenesisValueVault} from \\\"./interfaces/IGenesisValueVault.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {RoundingUint256} from \\\"./libraries/math/RoundingUint256.sol\\\";\\nimport {RoundingInt256} from \\\"./libraries/math/RoundingInt256.sol\\\";\\nimport {FullMath} from \\\"./libraries/math/FullMath.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\n// utils\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {GenesisValueVaultStorage as Storage, AutoRollLog} from \\\"./storages/GenesisValueVaultStorage.sol\\\";\\n\\n/**\\n * @notice Implements the management of the genesis value as an amount for Lending deals.\\n */\\ncontract GenesisValueVault is IGenesisValueVault, MixinAddressResolver, Proxyable {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using RoundingUint256 for uint256;\\n    using RoundingInt256 for int256;\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function initialize(address _resolver) public initializer onlyProxy {\\n        registerAddressResolver(_resolver);\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](2);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n        contracts[1] = Contracts.RESERVE_FUND;\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    function isInitialized(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().isInitialized[_ccy];\\n    }\\n\\n    function decimals(bytes32 _ccy) public view override returns (uint8) {\\n        return Storage.slot().decimals[_ccy];\\n    }\\n\\n    function getTotalLendingSupply(bytes32 _ccy) external view override returns (uint256) {\\n        return Storage.slot().totalLendingSupplies[_ccy];\\n    }\\n\\n    function getTotalBorrowingSupply(bytes32 _ccy) external view override returns (uint256) {\\n        return Storage.slot().totalBorrowingSupplies[_ccy];\\n    }\\n\\n    function getGenesisValue(bytes32 _ccy, address _user) public view override returns (int256) {\\n        (int256 balance, int256 fluctuation) = _getActualBalance(\\n            _ccy,\\n            _user,\\n            getCurrentMaturity(_ccy)\\n        );\\n        return balance + fluctuation;\\n    }\\n\\n    function getMaturityGenesisValue(bytes32 _ccy, uint256 _maturity)\\n        external\\n        view\\n        override\\n        returns (int256)\\n    {\\n        return Storage.slot().maturityBalances[_ccy][_maturity];\\n    }\\n\\n    function getCurrentMaturity(bytes32 _ccy) public view override returns (uint256) {\\n        return Storage.slot().currentMaturity[_ccy];\\n    }\\n\\n    function getLendingCompoundFactor(bytes32 _ccy) public view override returns (uint256) {\\n        return Storage.slot().lendingCompoundFactors[_ccy];\\n    }\\n\\n    function getBorrowingCompoundFactor(bytes32 _ccy) public view override returns (uint256) {\\n        return Storage.slot().borrowingCompoundFactors[_ccy];\\n    }\\n\\n    function getAutoRollLog(bytes32 _ccy, uint256 _maturity)\\n        external\\n        view\\n        override\\n        returns (AutoRollLog memory)\\n    {\\n        return Storage.slot().autoRollLogs[_ccy][_maturity];\\n    }\\n\\n    function getLatestAutoRollLog(bytes32 _ccy)\\n        external\\n        view\\n        override\\n        returns (AutoRollLog memory)\\n    {\\n        return Storage.slot().autoRollLogs[_ccy][Storage.slot().currentMaturity[_ccy]];\\n    }\\n\\n    function getGenesisValueInFutureValue(bytes32 _ccy, address _user)\\n        external\\n        view\\n        override\\n        returns (int256)\\n    {\\n        // NOTE: The formula is:\\n        // futureValue = genesisValue * currentCompoundFactor.\\n        return\\n            (getGenesisValue(_ccy, _user) * getLendingCompoundFactor(_ccy).toInt256()).div(\\n                (10**decimals(_ccy)).toInt256()\\n            );\\n    }\\n\\n    function calculateFVFromFV(\\n        bytes32 _ccy,\\n        uint256 _basisMaturity,\\n        uint256 _destinationMaturity,\\n        int256 _futureValue\\n    ) external view override returns (int256) {\\n        if (_futureValue == 0) {\\n            return 0;\\n        } else if (_basisMaturity == _destinationMaturity) {\\n            return _futureValue;\\n        } else {\\n            // NOTE: These calculation steps \\\"FV -> GV -> FV\\\" are needed to match the actual conversion step.\\n            // Otherwise, Solidity's truncation specification creates a difference in the calculated values.\\n            // The formula is:\\n            // genesisValue = featureValueInMaturity / compoundFactorInMaturity.\\n            // currentFeatureValue = genesisValue * currentCompoundFactor\\n            int256 genesisValue = calculateGVFromFV(_ccy, _basisMaturity, _futureValue);\\n            return calculateFVFromGV(_ccy, _destinationMaturity, genesisValue);\\n        }\\n    }\\n\\n    function calculateGVFromFV(\\n        bytes32 _ccy,\\n        uint256 _basisMaturity,\\n        int256 _futureValue\\n    ) public view override returns (int256) {\\n        uint256 compoundFactor = _basisMaturity == Storage.slot().currentMaturity[_ccy]\\n            ? getLendingCompoundFactor(_ccy)\\n            : Storage.slot().autoRollLogs[_ccy][_basisMaturity].lendingCompoundFactor;\\n\\n        require(compoundFactor > 0, \\\"Compound factor is not fixed yet\\\");\\n\\n        // NOTE: The formula is: genesisValue = featureValue / compoundFactor.\\n        bool isPlus = _futureValue > 0;\\n        uint256 absFv = (isPlus ? _futureValue : -_futureValue).toUint256();\\n        uint256 absGv = (absFv * 10**decimals(_ccy)).div(compoundFactor);\\n        return isPlus ? absGv.toInt256() : -(absGv.toInt256());\\n    }\\n\\n    function calculateFVFromGV(\\n        bytes32 _ccy,\\n        uint256 _basisMaturity,\\n        int256 _genesisValue\\n    ) public view override returns (int256) {\\n        uint256 compoundFactor = _basisMaturity == 0 ||\\n            _basisMaturity == Storage.slot().currentMaturity[_ccy]\\n            ? getLendingCompoundFactor(_ccy)\\n            : Storage.slot().autoRollLogs[_ccy][_basisMaturity].lendingCompoundFactor;\\n\\n        require(compoundFactor > 0, \\\"Compound factor is not fixed yet\\\");\\n        bool isPlus = _genesisValue > 0;\\n        uint256 absGv = (isPlus ? _genesisValue : -_genesisValue).toUint256();\\n        uint256 absFv = (absGv * compoundFactor).div(10**decimals(_ccy));\\n\\n        return isPlus ? absFv.toInt256() : -(absFv.toInt256());\\n    }\\n\\n    function initializeCurrencySetting(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        uint256 _compoundFactor,\\n        uint256 _maturity\\n    ) external override onlyAcceptedContracts {\\n        require(_compoundFactor != 0, \\\"Compound factor is zero\\\");\\n        require(!isInitialized(_ccy), \\\"Already initialized currency\\\");\\n\\n        Storage.slot().isInitialized[_ccy] = true;\\n        Storage.slot().decimals[_ccy] = _decimals;\\n        Storage.slot().initialCompoundFactors[_ccy] = _compoundFactor;\\n        Storage.slot().lendingCompoundFactors[_ccy] = _compoundFactor;\\n        Storage.slot().borrowingCompoundFactors[_ccy] = _compoundFactor;\\n        Storage.slot().currentMaturity[_ccy] = _maturity;\\n\\n        // Update autoRollLogs by initial compound factor.\\n        // These values are updated by the first Itayose call of the nearest maturity market\\n        // if it is executed.\\n        Storage.slot().autoRollLogs[_ccy][_maturity] = AutoRollLog({\\n            unitPrice: ProtocolTypes.PRICE_DIGIT,\\n            lendingCompoundFactor: _compoundFactor,\\n            borrowingCompoundFactor: _compoundFactor,\\n            prev: 0,\\n            next: 0\\n        });\\n    }\\n\\n    function updateInitialCompoundFactor(bytes32 _ccy, uint256 _unitPrice)\\n        external\\n        override\\n        onlyAcceptedContracts\\n    {\\n        uint256 maturity = Storage.slot().currentMaturity[_ccy];\\n\\n        require(\\n            Storage.slot().autoRollLogs[_ccy][maturity].prev == 0,\\n            \\\"First autoRollLog already finalized\\\"\\n        );\\n\\n        _updateCompoundFactor(_ccy, _unitPrice, 0);\\n        Storage.slot().autoRollLogs[_ccy][maturity] = AutoRollLog({\\n            unitPrice: _unitPrice,\\n            lendingCompoundFactor: Storage.slot().lendingCompoundFactors[_ccy],\\n            borrowingCompoundFactor: Storage.slot().borrowingCompoundFactors[_ccy],\\n            prev: 0,\\n            next: 0\\n        });\\n    }\\n\\n    function executeAutoRoll(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _nextMaturity,\\n        uint256 _unitPrice,\\n        uint256 _feeRate,\\n        uint256 _totalFVAmount\\n    ) external override onlyAcceptedContracts {\\n        _updateCompoundFactor(_ccy, _unitPrice, _feeRate);\\n        _updateAutoRollLogs(_ccy, _maturity, _nextMaturity, _unitPrice);\\n        _registerMaximumTotalSupply(_ccy, _maturity, _totalFVAmount);\\n\\n        emit AutoRollExecuted(\\n            _ccy,\\n            Storage.slot().lendingCompoundFactors[_ccy],\\n            Storage.slot().borrowingCompoundFactors[_ccy],\\n            _unitPrice,\\n            _nextMaturity,\\n            _maturity\\n        );\\n    }\\n\\n    function _updateAutoRollLogs(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _nextMaturity,\\n        uint256 _unitPrice\\n    ) private {\\n        require(_unitPrice != 0, \\\"unitPrice is zero\\\");\\n        require(Storage.slot().autoRollLogs[_ccy][_maturity].next == 0, \\\"Already updated maturity\\\");\\n        require(_nextMaturity > _maturity, \\\"Invalid maturity\\\");\\n        require(\\n            Storage.slot().autoRollLogs[_ccy][_nextMaturity].lendingCompoundFactor == 0,\\n            \\\"Existed maturity\\\"\\n        );\\n\\n        require(\\n            Storage.slot().autoRollLogs[_ccy][_maturity].lendingCompoundFactor != 0,\\n            \\\"Invalid lending compound factor\\\"\\n        );\\n        require(\\n            Storage.slot().autoRollLogs[_ccy][_maturity].borrowingCompoundFactor != 0,\\n            \\\"Invalid borrowing compound factor\\\"\\n        );\\n\\n        Storage.slot().currentMaturity[_ccy] = _nextMaturity;\\n\\n        Storage.slot().autoRollLogs[_ccy][_maturity].next = _nextMaturity;\\n        Storage.slot().autoRollLogs[_ccy][_nextMaturity] = AutoRollLog({\\n            unitPrice: _unitPrice,\\n            lendingCompoundFactor: Storage.slot().lendingCompoundFactors[_ccy],\\n            borrowingCompoundFactor: Storage.slot().borrowingCompoundFactors[_ccy],\\n            prev: _maturity,\\n            next: 0\\n        });\\n    }\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _basisMaturity,\\n        int256 _fvAmount\\n    ) external override onlyAcceptedContracts {\\n        int256 amount = calculateGVFromFV(_ccy, _basisMaturity, _fvAmount);\\n\\n        _updateBalance(_ccy, _user, _basisMaturity, amount);\\n    }\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _basisMaturity\\n    ) external override onlyAcceptedContracts {\\n        int256 residualGVAmount = Storage.slot().maturityBalances[_ccy][_basisMaturity];\\n\\n        _updateBalance(_ccy, _user, _basisMaturity, -residualGVAmount);\\n\\n        require(\\n            Storage.slot().maturityBalances[_ccy][_basisMaturity] == 0,\\n            \\\"Residual amount exists\\\"\\n        );\\n    }\\n\\n    function offsetGenesisValue(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _lender,\\n        address _borrower,\\n        int256 _maximumGVAmount\\n    ) external override onlyAcceptedContracts returns (int256 offsetAmount) {\\n        int256 lenderGVAmount = getGenesisValue(_ccy, _lender);\\n        int256 borrowerGVAmount = getGenesisValue(_ccy, _borrower);\\n\\n        if (lenderGVAmount <= 0 || borrowerGVAmount >= 0) {\\n            return 0;\\n        } else {\\n            offsetAmount = lenderGVAmount;\\n        }\\n\\n        if (-borrowerGVAmount < lenderGVAmount) {\\n            offsetAmount = -borrowerGVAmount;\\n        }\\n\\n        if (_maximumGVAmount != 0 && offsetAmount > _maximumGVAmount) {\\n            offsetAmount = _maximumGVAmount;\\n        }\\n\\n        _updateBalance(_ccy, _lender, _maturity, -offsetAmount);\\n        _updateBalance(_ccy, _borrower, _maturity, offsetAmount);\\n    }\\n\\n    function cleanUpGenesisValue(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _maturity\\n    ) external override onlyAcceptedContracts {\\n        uint256 maturity = _maturity == 0 ? getCurrentMaturity(_ccy) : _maturity;\\n        int256 fluctuation = _getBalanceFluctuationByAutoRolls(_ccy, _user, maturity);\\n\\n        if (fluctuation < 0) {\\n            address reserveFundAddr = address(reserveFund());\\n\\n            _updateTotalSupplies(_ccy, fluctuation, Storage.slot().balances[_ccy][_user]);\\n            _updateTotalSupplies(\\n                _ccy,\\n                -fluctuation,\\n                Storage.slot().balances[_ccy][reserveFundAddr]\\n            );\\n\\n            Storage.slot().userMaturities[_ccy][_user] = maturity;\\n            Storage.slot().balances[_ccy][_user] += fluctuation;\\n            Storage.slot().balances[_ccy][reserveFundAddr] += -fluctuation;\\n\\n            emit Transfer(_ccy, _user, reserveFundAddr, -fluctuation);\\n        }\\n    }\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _maturity\\n    ) external view override returns (int256 fluctuation) {\\n        uint256 maturity = _maturity == 0 ? getCurrentMaturity(_ccy) : _maturity;\\n        fluctuation = _getBalanceFluctuationByAutoRolls(_ccy, _user, maturity);\\n    }\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 _ccy,\\n        int256 _balance,\\n        uint256 _fromMaturity,\\n        uint256 _toMaturity\\n    ) external view override returns (int256 fluctuation) {\\n        uint256 toMaturity = _toMaturity == 0 ? getCurrentMaturity(_ccy) : _toMaturity;\\n        fluctuation = _calculateBalanceFluctuationByAutoRolls(\\n            _ccy,\\n            _balance,\\n            _fromMaturity,\\n            toMaturity\\n        );\\n    }\\n\\n    function _updateBalance(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _maturity,\\n        int256 _amount\\n    ) private {\\n        (int256 balance, int256 fluctuation) = _getActualBalance(_ccy, _user, _maturity);\\n        int256 totalAmount = _amount;\\n\\n        // Note: `fluctuation` is always 0 or less because the genesis value fluctuates\\n        // only when it is negative.\\n        // Here, only the opposite amount of the fluctuation is added to the reserve fund as a fee.\\n        if (fluctuation < 0) {\\n            totalAmount += fluctuation;\\n            address reserveFundAddr = address(reserveFund());\\n            Storage.slot().balances[_ccy][reserveFundAddr] += -fluctuation;\\n\\n            _updateTotalSupplies(\\n                _ccy,\\n                -fluctuation,\\n                Storage.slot().balances[_ccy][reserveFundAddr]\\n            );\\n\\n            emit Transfer(_ccy, _user, reserveFundAddr, -fluctuation);\\n        }\\n\\n        _updateTotalSupplies(_ccy, totalAmount, balance);\\n\\n        Storage.slot().userMaturities[_ccy][_user] = _maturity;\\n        Storage.slot().balances[_ccy][_user] += totalAmount;\\n        Storage.slot().maturityBalances[_ccy][_maturity] += _amount;\\n\\n        emit Transfer(_ccy, address(0), _user, _amount);\\n    }\\n\\n    function _updateTotalSupplies(\\n        bytes32 _ccy,\\n        int256 _amount,\\n        int256 _balance\\n    ) private {\\n        if (_amount >= 0) {\\n            uint256 absAmount = _amount.toUint256();\\n            if (_balance >= 0) {\\n                Storage.slot().totalLendingSupplies[_ccy] += absAmount;\\n            } else {\\n                int256 diff = _amount + _balance;\\n                if (diff >= 0) {\\n                    Storage.slot().totalLendingSupplies[_ccy] += diff.toUint256();\\n                    Storage.slot().totalBorrowingSupplies[_ccy] -= (-_balance).toUint256();\\n                } else {\\n                    Storage.slot().totalBorrowingSupplies[_ccy] -= absAmount;\\n                }\\n            }\\n        } else {\\n            uint256 absAmount = (-_amount).toUint256();\\n            if (_balance <= 0) {\\n                Storage.slot().totalBorrowingSupplies[_ccy] += absAmount;\\n            } else {\\n                int256 diff = _amount + _balance;\\n                if (diff <= 0) {\\n                    Storage.slot().totalBorrowingSupplies[_ccy] += (-diff).toUint256();\\n                    Storage.slot().totalLendingSupplies[_ccy] -= _balance.toUint256();\\n                } else {\\n                    Storage.slot().totalLendingSupplies[_ccy] -= absAmount;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _registerMaximumTotalSupply(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _totalFVAmount\\n    ) private {\\n        require(Storage.slot().maximumTotalSupply[_ccy][_maturity] == 0, \\\"Already registered\\\");\\n\\n        Storage.slot().maximumTotalSupply[_ccy][_maturity] = (_totalFVAmount * 10**decimals(_ccy))\\n            .div(getLendingCompoundFactor(_ccy));\\n    }\\n\\n    function _getActualBalance(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _maturity\\n    ) private view returns (int256 balance, int256 fluctuation) {\\n        fluctuation = _getBalanceFluctuationByAutoRolls(_ccy, _user, _maturity);\\n        balance = Storage.slot().balances[_ccy][_user];\\n    }\\n\\n    /**\\n     * @notice Calculates the fluctuation amount of genesis value caused by auto-rolls.\\n     * @dev The genesis value means the present value of the lending position at the time\\n     * when the initial market is opened, so the genesis value amount will fluctuate\\n     * by the fee rate due to auto-rolls if it is negative (equals to the borrowing position).\\n     * @param _ccy Currency for pausing all lending markets\\n     * @param _user User's address\\n     * @return fluctuation The fluctuated genesis value amount\\n     */\\n    function _getBalanceFluctuationByAutoRolls(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _maturity\\n    ) private view returns (int256 fluctuation) {\\n        int256 balance = Storage.slot().balances[_ccy][_user];\\n        uint256 userMaturity = Storage.slot().userMaturities[_ccy][_user];\\n\\n        fluctuation = _calculateBalanceFluctuationByAutoRolls(\\n            _ccy,\\n            balance,\\n            userMaturity,\\n            _maturity\\n        );\\n    }\\n\\n    function _calculateBalanceFluctuationByAutoRolls(\\n        bytes32 _ccy,\\n        int256 _balance,\\n        uint256 _fromMaturity,\\n        uint256 _toMaturity\\n    ) private view returns (int256 fluctuation) {\\n        if (_balance >= 0 || _toMaturity <= _fromMaturity || _fromMaturity == 0) {\\n            return 0;\\n        }\\n\\n        AutoRollLog memory autoRollLog = Storage.slot().autoRollLogs[_ccy][_fromMaturity];\\n\\n        uint256 destinationBorrowingCF;\\n        uint256 destinationLendingCF;\\n        uint256 currentMaturity = getCurrentMaturity(_ccy);\\n\\n        if (_toMaturity > currentMaturity) {\\n            return 0;\\n        } else if (_toMaturity == currentMaturity) {\\n            destinationBorrowingCF = Storage.slot().borrowingCompoundFactors[_ccy];\\n            destinationLendingCF = Storage.slot().lendingCompoundFactors[_ccy];\\n        } else {\\n            AutoRollLog memory destinationAutoRollLog = Storage.slot().autoRollLogs[_ccy][\\n                _toMaturity\\n            ];\\n            destinationBorrowingCF = destinationAutoRollLog.borrowingCompoundFactor;\\n            destinationLendingCF = destinationAutoRollLog.lendingCompoundFactor;\\n        }\\n\\n        // Note: The formula is:\\n        // fluctuation = currentBalance * ((currentBCF / userBCF) * (userLCF / currentLCF) - 1)\\n        fluctuation =\\n            -FullMath\\n                .mulDiv(\\n                    FullMath.mulDiv(\\n                        (-_balance).toUint256(),\\n                        destinationBorrowingCF,\\n                        autoRollLog.borrowingCompoundFactor\\n                    ),\\n                    autoRollLog.lendingCompoundFactor,\\n                    destinationLendingCF\\n                )\\n                .toInt256() -\\n            _balance;\\n    }\\n\\n    function _updateCompoundFactor(\\n        bytes32 _ccy,\\n        uint256 _unitPrice,\\n        uint256 _feeRate\\n    ) private {\\n        require(_feeRate <= ProtocolTypes.PCT_DIGIT, \\\"Invalid fee rate\\\");\\n\\n        // Save actual compound factor here due to calculating the genesis value from future value.\\n        // NOTE: The formula is:\\n        // autoRollRate = 1 / unitPrice\\n        // newLendingCompoundFactor = currentLendingCompoundFactor * (autoRollRate - feeRate)\\n        // newBorrowingCompoundFactor = currentBorrowingCompoundFactor * (autoRollRate + feeRate)\\n        Storage.slot().lendingCompoundFactors[_ccy] =\\n            (Storage.slot().lendingCompoundFactors[_ccy] *\\n                (ProtocolTypes.PRICE_DIGIT * ProtocolTypes.PCT_DIGIT - _feeRate * _unitPrice)) /\\n            (ProtocolTypes.PCT_DIGIT * _unitPrice);\\n\\n        Storage.slot().borrowingCompoundFactors[_ccy] =\\n            (Storage.slot().borrowingCompoundFactors[_ccy] *\\n                (ProtocolTypes.PRICE_DIGIT * ProtocolTypes.PCT_DIGIT + _feeRate * _unitPrice)) /\\n            (ProtocolTypes.PCT_DIGIT * _unitPrice);\\n    }\\n}\\n\",\"keccak256\":\"0x3d6b8d5c7f01106419ff5b81494333d861b2e2770195337b3bd789ace06efb27\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 openingDate\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0xcedc431629fa9537e673fc37ceae4cc645cf1f4ff9071b05396b9e3944ce6dd9\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Currency} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, int256 _amount) external view returns (int256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        address _ethPriceFeed,\\n        uint256 _haircut\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0x9f2a9f700546079ae054a7904b66ff83a1fa9a5643a0cb7ae1766a0dc265ec50\",\"license\":\"MIT\"},\"contracts/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 _ccy, uint256 _maturity)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 _ccy) external view returns (AutoRollLog memory);\\n\\n    function getGenesisValueInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function calculateFVFromFV(\\n        bytes32 _ccy,\\n        uint256 _basisMaturity,\\n        uint256 _destinationMaturity,\\n        int256 _futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateInitialCompoundFactor(bytes32 _ccy, uint256 _unitPrice) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 feeRate,\\n        uint256 totalFVAmount\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function offsetGenesisValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address lender,\\n        address borrower,\\n        int256 maximumGVAmount\\n    ) external returns (int256 offsetAmount);\\n\\n    function cleanUpGenesisValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4abb002bd8a3fdcc4a6b4734a5b9f6fb2bb0d2bdaf61911ef74ad2ab3b686cda\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(\\n        bytes32 indexed ccy,\\n        address indexed marketAddr,\\n        address futureValueVault,\\n        uint256 index,\\n        uint256 openingDate,\\n        uint256 maturity\\n    );\\n    event LendingMarketsRotated(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n    event LiquidationExecuted(\\n        address indexed user,\\n        bytes32 collateralCcy,\\n        bytes32 indexed debtCcy,\\n        uint256 indexed debtMaturity,\\n        uint256 amount\\n    );\\n\\n    function isLiquidator(address user) external view returns (bool);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 ccy) external view returns (address[] memory);\\n\\n    function getLendingMarket(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getBorrowUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getLendUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getMidUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getBorrowOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getFutureValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (int256 futureValue);\\n\\n    function getPresentValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (int256 presentValue);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInETH(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256 genesisValue);\\n\\n    function calculateFunds(bytes32 ccy, address user)\\n        external\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        );\\n\\n    function calculateTotalFundsInETH(\\n        address user,\\n        bytes32 depositCcy,\\n        uint256 depositAmount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount,\\n            bool isEnoughDeposit\\n        );\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 autoRollFeeRate\\n    ) external;\\n\\n    function createLendingMarket(bytes32 ccy, uint256 marketOpeningDate) external;\\n\\n    function createOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreateOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function createPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreatePreOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external payable returns (bool);\\n\\n    function unwindOrder(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeItayoseCalls(bytes32[] memory currencies, uint256 maturity)\\n        external\\n        returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user,\\n        uint24 poolFee\\n    ) external returns (bool);\\n\\n    function registerLiquidator(bool isLiquidator) external;\\n\\n    function cancelOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint48 orderId\\n    ) external returns (bool);\\n\\n    function rotateLendingMarkets(bytes32 ccy) external;\\n\\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external;\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n}\\n\",\"keccak256\":\"0xa18837f65e741d8057303f277850099726d062b15de40527e2d89fe9f8ee95b4\",\"license\":\"MIT\"},\"contracts/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa2a6df7a095ca8f8874d26672f75fe1f09c45caf041cb27d5e265bcb974a9754\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ITokenVault {\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n    event Swap(\\n        address indexed user,\\n        bytes32 ccyIn,\\n        bytes32 ccyOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 liquidatorFee,\\n        uint256 protocolFee\\n    );\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy,\\n        uint256 unsettledExp,\\n        ProtocolTypes.Side unsettledOrderSide\\n    ) external view returns (bool);\\n\\n    function isCovered(address user) external view returns (bool);\\n\\n    function isCollateral(bytes32 _ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata _ccys)\\n        external\\n        view\\n        returns (bool[] memory isCollateralCurrencies);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address party) external view returns (uint256);\\n\\n    function getLiquidationAmount(address user) external view returns (uint256 liquidationAmount);\\n\\n    function getTotalDepositAmount(bytes32 _ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256 liquidationThresholdRate,\\n            uint256 liquidationProtocolFeeRate,\\n            uint256 liquidatorFeeRate,\\n            address uniswapRouter,\\n            address uniswapQuoter\\n        );\\n\\n    function setCollateralParameters(\\n        uint256 liquidationThresholdRate,\\n        uint256 liquidationProtocolFeeRate,\\n        uint256 liquidatorFeeRate,\\n        address uniswapRouter,\\n        address uniswapQuoter\\n    ) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function removeDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function swapDepositAmounts(\\n        address liquidator,\\n        address user,\\n        bytes32 ccyFrom,\\n        bytes32 ccyTo,\\n        uint256 amountOut,\\n        uint24 poolFee,\\n        uint256 offsetAmount\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x4aeca00b083b242247a0df9cc2f0de7a669314058729ac8830f73f6a5d28f520\",\"license\":\"MIT\"},\"contracts/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0x65d55399d6c8b753ddaa36c1370fae1c68dfbfb8b6b2d09b1717ba037b079998\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x8e73eead72efa03bcc03c1cdf72cdcebed0f7e6f5a58cda1fd74e0fc03f356e6\",\"license\":\"MIT\"},\"contracts/libraries/math/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // uint256 twos = -denominator & denominator;\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x71afe095368f297645cf488b7c9bb88260256ce0eac221b23727946de68dfae8\",\"license\":\"MIT\"},\"contracts/libraries/math/RoundingInt256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingInt256 {\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0);\\n\\n        int256 diff = (a * 10) / b - (a / b) * 10;\\n        if (diff >= 5) {\\n            return (a / b) + 1;\\n        } else if (diff <= -5) {\\n            return (a / b) - 1;\\n        } else {\\n            return a / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7ab7168f709ecb8d28c017b8c074fe83ae88de347d3aed6ce13f2188d854cb9\",\"license\":\"MIT\"},\"contracts/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc360f39a82f1a9a7454726e3db802407d305b5e525aa8c3236fe49ca6ca534d\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AddressResolverLib} from \\\"../libraries/AddressResolverLib.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @notice Returns contract names that can call this contract.\\n     * @dev The contact name listed in this method is also needed to be listed `requiredContracts` method.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(Storage.slot().resolver) == address(0), \\\"resolver registered already\\\");\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        return AddressResolverLib.getAddress(name);\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return AddressResolverLib.beaconProxyController();\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return AddressResolverLib.currencyController();\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return AddressResolverLib.genesisValueVault();\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return AddressResolverLib.reserveFund();\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return AddressResolverLib.lendingMarketController();\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return AddressResolverLib.tokenVault();\\n    }\\n}\\n\",\"keccak256\":\"0x4d493d440938aff382d6d61c105a5c276697242390b0c1cab1627e646396df39\",\"license\":\"MIT\"},\"contracts/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct Currency {\\n    bool isSupported;\\n    string name;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // PriceFeed\\n        mapping(bytes32 => AggregatorV3Interface) usdPriceFeeds;\\n        mapping(bytes32 => AggregatorV3Interface) ethPriceFeeds;\\n        mapping(bytes32 => uint8) usdDecimals;\\n        mapping(bytes32 => uint8) ethDecimals;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x318293c6e7a2b9129e4c4e05a873c772e3a0cc4a92b40cc88749586f716c6643\",\"license\":\"MIT\"},\"contracts/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isInitialized;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) lendingCompoundFactors;\\n        mapping(bytes32 => uint256) borrowingCompoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity balance per currency\\n        mapping(bytes32 => mapping(uint256 => int256)) maturityBalances;\\n        // Mapping from maturity to auto-roll log per currency\\n        mapping(bytes32 => mapping(uint256 => AutoRollLog)) autoRollLogs;\\n        // Mapping from user to maturity per currency\\n        mapping(bytes32 => mapping(address => uint256)) userMaturities;\\n        // Mapping from maturity to maximum total supply per currency\\n        mapping(bytes32 => mapping(uint256 => uint256)) maximumTotalSupply;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa3bdb289513fa796d60fa49b83af011113a693377e1466ab4088cb5fd11a2917\",\"license\":\"MIT\"},\"contracts/storages/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x852b885b6264a58930a0945c68842717e19f954eaefc0137235e6f263e17fa9d\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant PRICE_DIGIT = 10000; // price digit in the basis (10000 -> 1)\\n    uint256 public constant PCT_DIGIT = 10000; // percentage digit in the basis (10000 -> 100%)\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_MONTH = 2592000; // 60 * 60 * 24 * 30 * 12\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000; // 60 * 60 * 24 * 365\\n\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x59177cbe982f07c6668eb2af2d6fe112923bccdf6a851d7d0eeba9d4a1e87f8a\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xe59cd60631c7c754ed6b77caa6f3a06301ef0df07881a3dcfa85124abc1890b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612f8d806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80639af50c0011610104578063c4d66de8116100a2578063e099765911610071578063e09976591461043f578063eeac29d814610447578063f7b637bb1461045a578063ff6dfc451461046d57600080fd5b8063c4d66de8146103f3578063d637c15f14610406578063db9b7b3814610419578063dc6a8ce41461042c57600080fd5b8063aee1311e116100de578063aee1311e146103a7578063c1c7ee52146103ba578063c2188b64146103cd578063c3e7a7ad146103e057600080fd5b80639af50c001461036e578063a2d7d02d14610381578063a969285f1461039457600080fd5b8063352a38a31161017c5780635f18aa0c1161014b5780635f18aa0c1461031057806370c641a6146103355780637636e9411461034857806388c0520e1461035b57600080fd5b8063352a38a3146102805780633d03b9da14610293578063474611f1146102a857806349a1d218146102fd57600080fd5b806329985e5a116101b857806329985e5a146102385780632af64bd314610242578063312c47451461025a578063348183cf1461026d57600080fd5b806304f3bcec146101df5780630d3946671461020457806318612e3214610225575b600080fd5b6101e7610480565b6040516001600160a01b0390911681526020015b60405180910390f35b6102176102123660046128ee565b6104a1565b6040519081526020016101fb565b610217610233366004612910565b6104d2565b610240610607565b005b61024a6107b4565b60405190151581526020016101fb565b610240610268366004612954565b61091a565b61024061027b36600461298c565b6109ef565b61021761028e366004612954565b610ac1565b61029b610aef565b6040516101fb91906129cf565b6102bb6102b63660046128ee565b610b7a565b6040516101fb9190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b61021761030b366004612a13565b610c0b565b61032361031e366004612a13565b610c29565b60405160ff90911681526020016101fb565b610217610343366004612a2c565b610c4a565b610217610356366004612910565b610c71565b610217610369366004612a5c565b610d63565b61021761037c366004612a13565b610e23565b61024061038f366004612aae565b610e41565b6102406103a23660046128ee565b611053565b6102176103b5366004612af1565b6111da565b6102406103c8366004612b23565b61120a565b6102176103db366004612a13565b611251565b6102176103ee366004612a2c565b61126f565b610240610401366004612b4b565b6112b6565b6102bb610414366004612a13565b611434565b610217610427366004612af1565b6114f0565b61021761043a366004612a13565b611534565b61029b611552565b610240610455366004612954565b6115a2565b61024a610468366004612a13565b611791565b61021761047b366004612a13565b6117af565b6000600080516020612f388339815191525b546001600160a01b0316919050565b60006104ab6117cd565b60008481526009919091016020908152604080832085845290915290205490505b92915050565b6000806104dd6117cd565b600086815260049190910160205260409020548414610524576104fe6117cd565b6000868152600a919091016020908152604080832087845290915290206001015461052d565b61052d856117af565b9050600081116105845760405162461bcd60e51b815260206004820181905260248201527f436f6d706f756e6420666163746f72206973206e6f742066697865642079657460448201526064015b60405180910390fd5b6000808413906105a6826105a05761059b86612b7e565b6117f0565b856117f0565b905060006105d2846105b78a610c29565b6105c290600a612c7f565b6105cc9085612c8e565b90611846565b9050826105f0576105e2816118b7565b6105eb90612b7e565b6105f9565b6105f9816118b7565b9450505050505b9392505050565b6000610611610aef565b905060005b81518110156107b057600082828151811061063357610633612cad565b602002602001015190506000610654600080516020612f3883398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd916106c591869190605d01612d10565b60206040518083038186803b1580156106dd57600080fd5b505afa1580156106f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107159190612d29565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a1505080806107a890612d46565b915050610616565b5050565b6000806107bf610aef565b905060005b81518110156109115760008282815181106107e1576107e1612cad565b60200260200101519050610800600080516020612f3883398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020612f38833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b15801561086d57600080fd5b505afa158015610881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a59190612d29565b6001600160a01b03161415806108ef575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b156108fe576000935050505090565b508061090981612d46565b9150506107c4565b50600191505090565b61092333611921565b61093f5760405162461bcd60e51b815260040161057b90612d61565b60006109496117cd565b600085815260099190910160209081526040808320858452909152902054905061097d84848461097885612b7e565b61199b565b6109856117cd565b600085815260099190910160209081526040808320858452909152902054156109e95760405162461bcd60e51b8152602060048201526016602482015275526573696475616c20616d6f756e742065786973747360501b604482015260640161057b565b50505050565b6109f833611921565b610a145760405162461bcd60e51b815260040161057b90612d61565b610a1f868484611bb8565b610a2b86868686611cee565b610a36868683612041565b857f90675b73d2aa47e7572569090cae87a7c67eff7a715ee461bae1b0256bde7160610a606117cd565b60008981526002919091016020526040902054610a7b6117cd565b60008a81526003919091016020908152604091829020548251938452908301528101869052606081018790526080810188905260a00160405180910390a2505050505050565b6000808215610ad05782610ad9565b610ad985610c0b565b9050610ae68585836120fb565b95945050505050565b6040805160028082526060808301845292602083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600081518110610b3d57610b3d612cad565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b81600181518110610b6b57610b6b612cad565b60200260200101818152505090565b610bac6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b610bb46117cd565b6000938452600a016020908152604080852093855292815292829020825160a08101845281548152600182015494810194909452600281015492840192909252506003810154606083015260040154608082015290565b6000610c156117cd565b600092835260040160205250604090205490565b6000610c336117cd565b600092835260050160205250604090205460ff1690565b6000806000610c628585610c5d88610c0b565b61216c565b9092509050610ae68183612d98565b600080831580610c9a5750610c846117cd565b6000868152600491909101602052604090205484145b610ccc57610ca66117cd565b6000868152600a9190910160209081526040808320878452909152902060010154610cd5565b610cd5856117af565b905060008111610d275760405162461bcd60e51b815260206004820181905260248201527f436f6d706f756e6420666163746f72206973206e6f7420666978656420796574604482015260640161057b565b600080841390610d3e826105a05761059b86612b7e565b905060006105d2610d4e89610c29565b610d5990600a612c7f565b6105cc8685612c8e565b6000610d6e33611921565b610d8a5760405162461bcd60e51b815260040161057b90612d61565b6000610d968786610c4a565b90506000610da48886610c4a565b9050600082131580610db7575060008112155b15610dc757600092505050610ae6565b81925081610dd482612b7e565b1215610de657610de381612b7e565b92505b8315801590610df457508383135b15610dfd578392505b610e0c88878961097887612b7e565b610e188886898661199b565b505095945050505050565b6000610e2d6117cd565b600092835260080160205250604090205490565b610e4a33611921565b610e665760405162461bcd60e51b815260040161057b90612d61565b81610eb35760405162461bcd60e51b815260206004820152601760248201527f436f6d706f756e6420666163746f72206973207a65726f000000000000000000604482015260640161057b565b610ebc84611791565b15610f095760405162461bcd60e51b815260206004820152601c60248201527f416c726561647920696e697469616c697a65642063757272656e637900000000604482015260640161057b565b6001610f136117cd565b600086815260209190915260409020805460ff191691151591909117905582610f3a6117cd565b600086815260059190910160205260409020805460ff191660ff9290921691909117905581610f676117cd565b6000868152600191909101602052604090205581610f836117cd565b6000868152600291909101602052604090205581610f9f6117cd565b6000868152600391909101602052604090205580610fbb6117cd565b6004016000868152602001908152602001600020819055506040518060a0016040528061271081526020018381526020018381526020016000815260200160008152506110066117cd565b6000958652600a0160209081526040808720938752928152948290208151815594810151600186015590810151600285015560608101516003850155608001516004909301929092555050565b61105c33611921565b6110785760405162461bcd60e51b815260040161057b90612d61565b60006110826117cd565b60008481526004919091016020526040902054905061109f6117cd565b6000848152600a9190910160209081526040808320848452909152902060040154156111195760405162461bcd60e51b815260206004820152602360248201527f4669727374206175746f526f6c6c4c6f6720616c72656164792066696e616c696044820152621e995960ea1b606482015260840161057b565b61112583836000611bb8565b6040518060a0016040528083815260200161113e6117cd565b60020160008681526020019081526020016000205481526020016111606117cd565b600301600086815260200190815260200160002054815260200160008152602001600081525061118e6117cd565b6000948552600a01602090815260408086209386529281529382902081518155938101516001850155908101516002840155606081015160038401556080015160049092019190915550565b60008082156111e957826111f2565b6111f286610c0b565b9050611200868686846121b2565b9695505050505050565b61121333611921565b61122f5760405162461bcd60e51b815260040161057b90612d61565b600061123c8584846104d2565b905061124a8585858461199b565b5050505050565b600061125b6117cd565b600092835260070160205250604090205490565b600061060061129061128085610c29565b61128b90600a612c7f565b6118b7565b61129c61128b866117af565b6112a68686610c4a565b6112b09190612dd9565b90612355565b600054610100900460ff16158080156112d65750600054600160ff909116105b806112f05750303b1580156112f0575060005460ff166001145b6113535760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161057b565b6000805460ff191660011790558015611376576000805461ff0019166101001790555b60006113806123e8565b6001600160a01b031614156113e25760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b606482015260840161057b565b6113eb82612410565b80156107b0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6114666040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b61146e6117cd565b6000838152600a9190910160205260408120906114896117cd565b60040160008581526020019081526020016000205481526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050919050565b6000816114ff5750600061152c565b8284141561150e57508061152c565b600061151b8686856104d2565b9050611528868583610c71565b9150505b949350505050565b600061153e6117cd565b600092835260030160205250604090205490565b60408051600180825281830190925260609160208083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600081518110610b6b57610b6b612cad565b6115ab33611921565b6115c75760405162461bcd60e51b815260040161057b90612d61565b600081156115d557816115de565b6115de84610c0b565b905060006115ed8585846120fb565b9050600081121561124a5760006116026124a5565b905061163d86836116116117cd565b60008a8152600691909101602090815260408083206001600160a01b038c1684529091529020546124b4565b61167e8661164a84612b7e565b6116526117cd565b60008a8152600691909101602090815260408083206001600160a01b03881684529091529020546124b4565b826116876117cd565b6000888152600b91909101602090815260408083206001600160a01b038a168452909152902055816116b76117cd565b6000888152600691909101602090815260408083206001600160a01b038a168452909152812080549091906116ed908490612d98565b909155506116fc905082612b7e565b6117046117cd565b6000888152600691909101602090815260408083206001600160a01b03861684529091528120805490919061173a908490612d98565b90915550506001600160a01b03808216908616877f224d4ee1e2931416deb62bbde4f281397249c4a54319c43ee455efc348c13f4f61177886612b7e565b60405190815260200160405180910390a4505050505050565b600061179b6117cd565b600092835260205250604090205460ff1690565b60006117b96117cd565b600092835260020160205250604090205490565b7eeb125d2cd445fcbd619aab5c9493ddf1b2fb2fb0a82715c79a670dddbf7d6590565b6000808212156118425760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015260640161057b565b5090565b600080821161185457600080fd5b60056118608385612e74565b61186b90600a612c8e565b8361187786600a612c8e565b6118819190612e74565b61188b9190612e88565b10156118a25761189b8284612e74565b90506104cc565b6118ac8284612e74565b61189b906001612e9f565b60006001600160ff1b038211156118425760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b606482015260840161057b565b60008061192c611552565b905060005b81518110156119915761195c82828151811061194f5761194f612cad565b60200260200101516126c9565b6001600160a01b0316846001600160a01b0316141561197f575060019392505050565b8061198981612d46565b915050611931565b5060009392505050565b6000806119a986868661216c565b9092509050826000821215611ab1576119c28282612d98565b905060006119ce6124a5565b90506119d983612b7e565b6119e16117cd565b60008a8152600691909101602090815260408083206001600160a01b038616845290915281208054909190611a17908490612d98565b90915550611a5e905088611a2a85612b7e565b611a326117cd565b60008c8152600691909101602090815260408083206001600160a01b03881684529091529020546124b4565b806001600160a01b0316876001600160a01b0316897f224d4ee1e2931416deb62bbde4f281397249c4a54319c43ee455efc348c13f4f86611a9e90612b7e565b60405190815260200160405180910390a4505b611abc8782856124b4565b84611ac56117cd565b6000898152600b91909101602090815260408083206001600160a01b038b16845290915290205580611af56117cd565b6000898152600691909101602090815260408083206001600160a01b038b16845290915281208054909190611b2b908490612d98565b90915550849050611b3a6117cd565b60008981526009919091016020908152604080832089845290915281208054909190611b67908490612d98565b90915550506040518481526001600160a01b0387169060009089907f224d4ee1e2931416deb62bbde4f281397249c4a54319c43ee455efc348c13f4f9060200160405180910390a450505050505050565b612710811115611bfd5760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420666565207261746560801b604482015260640161057b565b611c0982612710612c8e565b611c138383612c8e565b611c1f61271080612c8e565b611c299190612e88565b611c316117cd565b60008681526002919091016020526040902054611c4e9190612c8e565b611c589190612e74565b611c606117cd565b60008581526002919091016020526040902055611c7f82612710612c8e565b611c898383612c8e565b611c9561271080612c8e565b611c9f9190612e9f565b611ca76117cd565b60008681526003919091016020526040902054611cc49190612c8e565b611cce9190612e74565b611cd66117cd565b60009485526003016020526040909320929092555050565b80611d2f5760405162461bcd60e51b8152602060048201526011602482015270756e69745072696365206973207a65726f60781b604482015260640161057b565b611d376117cd565b6000858152600a919091016020908152604080832086845290915290206003015415611da55760405162461bcd60e51b815260206004820152601860248201527f416c72656164792075706461746564206d617475726974790000000000000000604482015260640161057b565b828211611de75760405162461bcd60e51b815260206004820152601060248201526f496e76616c6964206d6174757269747960801b604482015260640161057b565b611def6117cd565b6000858152600a919091016020908152604080832085845290915290206001015415611e505760405162461bcd60e51b815260206004820152601060248201526f45786973746564206d6174757269747960801b604482015260640161057b565b611e586117cd565b6000858152600a9190910160209081526040808320868452909152902060010154611ec55760405162461bcd60e51b815260206004820152601f60248201527f496e76616c6964206c656e64696e6720636f6d706f756e6420666163746f7200604482015260640161057b565b611ecd6117cd565b6000858152600a9190910160209081526040808320868452909152902060020154611f445760405162461bcd60e51b815260206004820152602160248201527f496e76616c696420626f72726f77696e6720636f6d706f756e6420666163746f6044820152603960f91b606482015260840161057b565b81611f4d6117cd565b6000868152600491909101602052604090205581611f696117cd565b6000868152600a919091016020908152604080832087845282529182902060030192909255805160a08101909152828152908101611fa56117cd565b6002016000878152602001908152602001600020548152602001611fc76117cd565b60030160008781526020019081526020016000205481526020016000815260200184815250611ff46117cd565b6000958652600a0160209081526040808720948752938152948390208151815594810151600186015591820151600285015550606081015160038401556080015160049092019190915550565b6120496117cd565b6000848152600c9190910160209081526040808320858452909152902054156120a95760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b604482015260640161057b565b6120d36120b5846117af565b6120be85610c29565b6120c990600a612c7f565b6105cc9084612c8e565b6120db6117cd565b6000948552600c0160209081526040808620948652939052919092205550565b6000806121066117cd565b6000868152600691909101602090815260408083206001600160a01b038816845290915281205491506121376117cd565b6000878152600b91909101602090815260408083206001600160a01b03891684529091529020549050611200868383876121b2565b60008061217a8585856120fb565b90506121846117cd565b6000958652600601602090815260408087206001600160a01b03909616875294905292909320549391925050565b600080841215806121c35750828211155b806121cc575082155b156121d95750600061152c565b60006121e36117cd565b6000878152600a91909101602090815260408083208784528252808320815160a08101835281548152600182015493810193909352600281015491830191909152600381015460608301526004015460808201529150808061224489610c0b565b90508086111561225b57600094505050505061152c565b808614156122a25761226b6117cd565b60008a8152600391909101602052604090205492506122886117cd565b60008a815260029190910160205260409020549150612309565b60006122ac6117cd565b60008b8152600a91909101602090815260408083208a8452825291829020825160a0810184528154815260018201549281018390526002820154938101849052600382015460608201526004909101546080909101529094509250505b8761233561128b61232a61231f61059b85612b7e565b8789604001516126d4565b8760200151866126d4565b61233e90612b7e565b6123489190612eb7565b9998505050505050505050565b60008161236157600080fd5b600061236d8385612ef6565b61237890600a612dd9565b8361238486600a612dd9565b61238e9190612ef6565b6123989190612eb7565b9050600581126123bf576123ac8385612ef6565b6123b7906001612d98565b9150506104cc565b60041981136123de5760016123d48486612ef6565b6123b79190612eb7565b6123b78385612ef6565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610492565b600080516020612f38833981519152546001600160a01b0316156124765760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c72656164790000000000604482015260640161057b565b600080516020612f3883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60006124af612841565b905090565b600082126125d25760006124c7836117f0565b90506000821261250857806124da6117cd565b600701600086815260200190815260200160002060008282546124fd9190612e9f565b909155506109e99050565b60006125148385612d98565b90506000811261259a57612527816117f0565b61252f6117cd565b600701600087815260200190815260200160002060008282546125529190612e9f565b90915550612564905061059b84612b7e565b61256c6117cd565b6008016000878152602001908152602001600020600082825461258f9190612e88565b9091555061124a9050565b816125a36117cd565b600801600087815260200190815260200160002060008282546125c69190612e88565b90915550505050505050565b60006125e061059b84612b7e565b90506000821361261657806125f36117cd565b600801600086815260200190815260200160002060008282546124fd9190612e9f565b60006126228385612d98565b90506000811361269d5761263861059b82612b7e565b6126406117cd565b600801600087815260200190815260200160002060008282546126639190612e9f565b909155506126729050836117f0565b61267a6117cd565b6007016000878152602001908152602001600020600082825461258f9190612e88565b816126a66117cd565b600701600087815260200190815260200160002060008282546125c69190612e88565b60006104cc82612856565b60008080600019858709858702925082811083820303915050806000141561270e576000841161270357600080fd5b508290049050610600565b80841161271a57600080fd5b600084868809808403938111909203919050600061273a86196001612e9f565b861695869004959384900493600081900304600101905061275b8184612c8e565b90931792600061276c876003612c8e565b600218905061277b8188612c8e565b612786906002612e88565b6127909082612c8e565b905061279c8188612c8e565b6127a7906002612e88565b6127b19082612c8e565b90506127bd8188612c8e565b6127c8906002612e88565b6127d29082612c8e565b90506127de8188612c8e565b6127e9906002612e88565b6127f39082612c8e565b90506127ff8188612c8e565b61280a906002612e88565b6128149082612c8e565b90506128208188612c8e565b61282b906002612e88565b6128359082612c8e565b90506123488186612c8e565b60006124af6a14995cd95c9d99519d5b9960aa1b5b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b031690816128e75760405162461bcd60e51b815260040161057b9190612f24565b5092915050565b6000806040838503121561290157600080fd5b50508035926020909101359150565b60008060006060848603121561292557600080fd5b505081359360208301359350604090920135919050565b6001600160a01b038116811461295157600080fd5b50565b60008060006060848603121561296957600080fd5b83359250602084013561297b8161293c565b929592945050506040919091013590565b60008060008060008060c087890312156129a557600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6020808252825182820181905260009190848201906040850190845b81811015612a07578351835292840192918401916001016129eb565b50909695505050505050565b600060208284031215612a2557600080fd5b5035919050565b60008060408385031215612a3f57600080fd5b823591506020830135612a518161293c565b809150509250929050565b600080600080600060a08688031215612a7457600080fd5b85359450602086013593506040860135612a8d8161293c565b92506060860135612a9d8161293c565b949793965091946080013592915050565b60008060008060808587031215612ac457600080fd5b84359350602085013560ff81168114612adc57600080fd5b93969395505050506040820135916060013590565b60008060008060808587031215612b0757600080fd5b5050823594602084013594506040840135936060013592509050565b60008060008060808587031215612b3957600080fd5b843593506020850135612adc8161293c565b600060208284031215612b5d57600080fd5b81356106008161293c565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b821415612b9457612b94612b68565b5060000390565b600181815b80851115612bd6578160001904821115612bbc57612bbc612b68565b80851615612bc957918102915b93841c9390800290612ba0565b509250929050565b600082612bed575060016104cc565b81612bfa575060006104cc565b8160018114612c105760028114612c1a57612c36565b60019150506104cc565b60ff841115612c2b57612c2b612b68565b50506001821b6104cc565b5060208310610133831016604e8410600b8410161715612c59575081810a6104cc565b612c638383612b9b565b8060001904821115612c7757612c77612b68565b029392505050565b600061060060ff841683612bde565b6000816000190483118215151615612ca857612ca8612b68565b500290565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015612ce957602081850181015186830182015201612ccd565b81811115612cfb576000602083870101525b50601f01601f19169290920160200192915050565b82815260406020820152600061152c6040830184612cc3565b600060208284031215612d3b57600080fd5b81516106008161293c565b6000600019821415612d5a57612d5a612b68565b5060010190565b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b600080821280156001600160ff1b0384900385131615612dba57612dba612b68565b600160ff1b8390038412811615612dd357612dd3612b68565b50500190565b60006001600160ff1b0381841382841380821686840486111615612dff57612dff612b68565b600160ff1b6000871282811687830589121615612e1e57612e1e612b68565b60008712925087820587128484161615612e3a57612e3a612b68565b87850587128184161615612e5057612e50612b68565b505050929093029392505050565b634e487b7160e01b600052601260045260246000fd5b600082612e8357612e83612e5e565b500490565b600082821015612e9a57612e9a612b68565b500390565b60008219821115612eb257612eb2612b68565b500190565b60008083128015600160ff1b850184121615612ed557612ed5612b68565b6001600160ff1b0384018313811615612ef057612ef0612b68565b50500390565b600082612f0557612f05612e5e565b600160ff1b821460001984141615612f1f57612f1f612b68565b500590565b6020815260006106006020830184612cc356fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124018a2646970667358221220b667da29bac66af1907909732d6bdd7375d499a11940d178ff7ee12434f9f85a64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80639af50c0011610104578063c4d66de8116100a2578063e099765911610071578063e09976591461043f578063eeac29d814610447578063f7b637bb1461045a578063ff6dfc451461046d57600080fd5b8063c4d66de8146103f3578063d637c15f14610406578063db9b7b3814610419578063dc6a8ce41461042c57600080fd5b8063aee1311e116100de578063aee1311e146103a7578063c1c7ee52146103ba578063c2188b64146103cd578063c3e7a7ad146103e057600080fd5b80639af50c001461036e578063a2d7d02d14610381578063a969285f1461039457600080fd5b8063352a38a31161017c5780635f18aa0c1161014b5780635f18aa0c1461031057806370c641a6146103355780637636e9411461034857806388c0520e1461035b57600080fd5b8063352a38a3146102805780633d03b9da14610293578063474611f1146102a857806349a1d218146102fd57600080fd5b806329985e5a116101b857806329985e5a146102385780632af64bd314610242578063312c47451461025a578063348183cf1461026d57600080fd5b806304f3bcec146101df5780630d3946671461020457806318612e3214610225575b600080fd5b6101e7610480565b6040516001600160a01b0390911681526020015b60405180910390f35b6102176102123660046128ee565b6104a1565b6040519081526020016101fb565b610217610233366004612910565b6104d2565b610240610607565b005b61024a6107b4565b60405190151581526020016101fb565b610240610268366004612954565b61091a565b61024061027b36600461298c565b6109ef565b61021761028e366004612954565b610ac1565b61029b610aef565b6040516101fb91906129cf565b6102bb6102b63660046128ee565b610b7a565b6040516101fb9190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b61021761030b366004612a13565b610c0b565b61032361031e366004612a13565b610c29565b60405160ff90911681526020016101fb565b610217610343366004612a2c565b610c4a565b610217610356366004612910565b610c71565b610217610369366004612a5c565b610d63565b61021761037c366004612a13565b610e23565b61024061038f366004612aae565b610e41565b6102406103a23660046128ee565b611053565b6102176103b5366004612af1565b6111da565b6102406103c8366004612b23565b61120a565b6102176103db366004612a13565b611251565b6102176103ee366004612a2c565b61126f565b610240610401366004612b4b565b6112b6565b6102bb610414366004612a13565b611434565b610217610427366004612af1565b6114f0565b61021761043a366004612a13565b611534565b61029b611552565b610240610455366004612954565b6115a2565b61024a610468366004612a13565b611791565b61021761047b366004612a13565b6117af565b6000600080516020612f388339815191525b546001600160a01b0316919050565b60006104ab6117cd565b60008481526009919091016020908152604080832085845290915290205490505b92915050565b6000806104dd6117cd565b600086815260049190910160205260409020548414610524576104fe6117cd565b6000868152600a919091016020908152604080832087845290915290206001015461052d565b61052d856117af565b9050600081116105845760405162461bcd60e51b815260206004820181905260248201527f436f6d706f756e6420666163746f72206973206e6f742066697865642079657460448201526064015b60405180910390fd5b6000808413906105a6826105a05761059b86612b7e565b6117f0565b856117f0565b905060006105d2846105b78a610c29565b6105c290600a612c7f565b6105cc9085612c8e565b90611846565b9050826105f0576105e2816118b7565b6105eb90612b7e565b6105f9565b6105f9816118b7565b9450505050505b9392505050565b6000610611610aef565b905060005b81518110156107b057600082828151811061063357610633612cad565b602002602001015190506000610654600080516020612f3883398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd916106c591869190605d01612d10565b60206040518083038186803b1580156106dd57600080fd5b505afa1580156106f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107159190612d29565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a1505080806107a890612d46565b915050610616565b5050565b6000806107bf610aef565b905060005b81518110156109115760008282815181106107e1576107e1612cad565b60200260200101519050610800600080516020612f3883398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020612f38833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b15801561086d57600080fd5b505afa158015610881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a59190612d29565b6001600160a01b03161415806108ef575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b156108fe576000935050505090565b508061090981612d46565b9150506107c4565b50600191505090565b61092333611921565b61093f5760405162461bcd60e51b815260040161057b90612d61565b60006109496117cd565b600085815260099190910160209081526040808320858452909152902054905061097d84848461097885612b7e565b61199b565b6109856117cd565b600085815260099190910160209081526040808320858452909152902054156109e95760405162461bcd60e51b8152602060048201526016602482015275526573696475616c20616d6f756e742065786973747360501b604482015260640161057b565b50505050565b6109f833611921565b610a145760405162461bcd60e51b815260040161057b90612d61565b610a1f868484611bb8565b610a2b86868686611cee565b610a36868683612041565b857f90675b73d2aa47e7572569090cae87a7c67eff7a715ee461bae1b0256bde7160610a606117cd565b60008981526002919091016020526040902054610a7b6117cd565b60008a81526003919091016020908152604091829020548251938452908301528101869052606081018790526080810188905260a00160405180910390a2505050505050565b6000808215610ad05782610ad9565b610ad985610c0b565b9050610ae68585836120fb565b95945050505050565b6040805160028082526060808301845292602083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600081518110610b3d57610b3d612cad565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b81600181518110610b6b57610b6b612cad565b60200260200101818152505090565b610bac6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b610bb46117cd565b6000938452600a016020908152604080852093855292815292829020825160a08101845281548152600182015494810194909452600281015492840192909252506003810154606083015260040154608082015290565b6000610c156117cd565b600092835260040160205250604090205490565b6000610c336117cd565b600092835260050160205250604090205460ff1690565b6000806000610c628585610c5d88610c0b565b61216c565b9092509050610ae68183612d98565b600080831580610c9a5750610c846117cd565b6000868152600491909101602052604090205484145b610ccc57610ca66117cd565b6000868152600a9190910160209081526040808320878452909152902060010154610cd5565b610cd5856117af565b905060008111610d275760405162461bcd60e51b815260206004820181905260248201527f436f6d706f756e6420666163746f72206973206e6f7420666978656420796574604482015260640161057b565b600080841390610d3e826105a05761059b86612b7e565b905060006105d2610d4e89610c29565b610d5990600a612c7f565b6105cc8685612c8e565b6000610d6e33611921565b610d8a5760405162461bcd60e51b815260040161057b90612d61565b6000610d968786610c4a565b90506000610da48886610c4a565b9050600082131580610db7575060008112155b15610dc757600092505050610ae6565b81925081610dd482612b7e565b1215610de657610de381612b7e565b92505b8315801590610df457508383135b15610dfd578392505b610e0c88878961097887612b7e565b610e188886898661199b565b505095945050505050565b6000610e2d6117cd565b600092835260080160205250604090205490565b610e4a33611921565b610e665760405162461bcd60e51b815260040161057b90612d61565b81610eb35760405162461bcd60e51b815260206004820152601760248201527f436f6d706f756e6420666163746f72206973207a65726f000000000000000000604482015260640161057b565b610ebc84611791565b15610f095760405162461bcd60e51b815260206004820152601c60248201527f416c726561647920696e697469616c697a65642063757272656e637900000000604482015260640161057b565b6001610f136117cd565b600086815260209190915260409020805460ff191691151591909117905582610f3a6117cd565b600086815260059190910160205260409020805460ff191660ff9290921691909117905581610f676117cd565b6000868152600191909101602052604090205581610f836117cd565b6000868152600291909101602052604090205581610f9f6117cd565b6000868152600391909101602052604090205580610fbb6117cd565b6004016000868152602001908152602001600020819055506040518060a0016040528061271081526020018381526020018381526020016000815260200160008152506110066117cd565b6000958652600a0160209081526040808720938752928152948290208151815594810151600186015590810151600285015560608101516003850155608001516004909301929092555050565b61105c33611921565b6110785760405162461bcd60e51b815260040161057b90612d61565b60006110826117cd565b60008481526004919091016020526040902054905061109f6117cd565b6000848152600a9190910160209081526040808320848452909152902060040154156111195760405162461bcd60e51b815260206004820152602360248201527f4669727374206175746f526f6c6c4c6f6720616c72656164792066696e616c696044820152621e995960ea1b606482015260840161057b565b61112583836000611bb8565b6040518060a0016040528083815260200161113e6117cd565b60020160008681526020019081526020016000205481526020016111606117cd565b600301600086815260200190815260200160002054815260200160008152602001600081525061118e6117cd565b6000948552600a01602090815260408086209386529281529382902081518155938101516001850155908101516002840155606081015160038401556080015160049092019190915550565b60008082156111e957826111f2565b6111f286610c0b565b9050611200868686846121b2565b9695505050505050565b61121333611921565b61122f5760405162461bcd60e51b815260040161057b90612d61565b600061123c8584846104d2565b905061124a8585858461199b565b5050505050565b600061125b6117cd565b600092835260070160205250604090205490565b600061060061129061128085610c29565b61128b90600a612c7f565b6118b7565b61129c61128b866117af565b6112a68686610c4a565b6112b09190612dd9565b90612355565b600054610100900460ff16158080156112d65750600054600160ff909116105b806112f05750303b1580156112f0575060005460ff166001145b6113535760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161057b565b6000805460ff191660011790558015611376576000805461ff0019166101001790555b60006113806123e8565b6001600160a01b031614156113e25760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b606482015260840161057b565b6113eb82612410565b80156107b0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6114666040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b61146e6117cd565b6000838152600a9190910160205260408120906114896117cd565b60040160008581526020019081526020016000205481526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050919050565b6000816114ff5750600061152c565b8284141561150e57508061152c565b600061151b8686856104d2565b9050611528868583610c71565b9150505b949350505050565b600061153e6117cd565b600092835260030160205250604090205490565b60408051600180825281830190925260609160208083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600081518110610b6b57610b6b612cad565b6115ab33611921565b6115c75760405162461bcd60e51b815260040161057b90612d61565b600081156115d557816115de565b6115de84610c0b565b905060006115ed8585846120fb565b9050600081121561124a5760006116026124a5565b905061163d86836116116117cd565b60008a8152600691909101602090815260408083206001600160a01b038c1684529091529020546124b4565b61167e8661164a84612b7e565b6116526117cd565b60008a8152600691909101602090815260408083206001600160a01b03881684529091529020546124b4565b826116876117cd565b6000888152600b91909101602090815260408083206001600160a01b038a168452909152902055816116b76117cd565b6000888152600691909101602090815260408083206001600160a01b038a168452909152812080549091906116ed908490612d98565b909155506116fc905082612b7e565b6117046117cd565b6000888152600691909101602090815260408083206001600160a01b03861684529091528120805490919061173a908490612d98565b90915550506001600160a01b03808216908616877f224d4ee1e2931416deb62bbde4f281397249c4a54319c43ee455efc348c13f4f61177886612b7e565b60405190815260200160405180910390a4505050505050565b600061179b6117cd565b600092835260205250604090205460ff1690565b60006117b96117cd565b600092835260020160205250604090205490565b7eeb125d2cd445fcbd619aab5c9493ddf1b2fb2fb0a82715c79a670dddbf7d6590565b6000808212156118425760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015260640161057b565b5090565b600080821161185457600080fd5b60056118608385612e74565b61186b90600a612c8e565b8361187786600a612c8e565b6118819190612e74565b61188b9190612e88565b10156118a25761189b8284612e74565b90506104cc565b6118ac8284612e74565b61189b906001612e9f565b60006001600160ff1b038211156118425760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b606482015260840161057b565b60008061192c611552565b905060005b81518110156119915761195c82828151811061194f5761194f612cad565b60200260200101516126c9565b6001600160a01b0316846001600160a01b0316141561197f575060019392505050565b8061198981612d46565b915050611931565b5060009392505050565b6000806119a986868661216c565b9092509050826000821215611ab1576119c28282612d98565b905060006119ce6124a5565b90506119d983612b7e565b6119e16117cd565b60008a8152600691909101602090815260408083206001600160a01b038616845290915281208054909190611a17908490612d98565b90915550611a5e905088611a2a85612b7e565b611a326117cd565b60008c8152600691909101602090815260408083206001600160a01b03881684529091529020546124b4565b806001600160a01b0316876001600160a01b0316897f224d4ee1e2931416deb62bbde4f281397249c4a54319c43ee455efc348c13f4f86611a9e90612b7e565b60405190815260200160405180910390a4505b611abc8782856124b4565b84611ac56117cd565b6000898152600b91909101602090815260408083206001600160a01b038b16845290915290205580611af56117cd565b6000898152600691909101602090815260408083206001600160a01b038b16845290915281208054909190611b2b908490612d98565b90915550849050611b3a6117cd565b60008981526009919091016020908152604080832089845290915281208054909190611b67908490612d98565b90915550506040518481526001600160a01b0387169060009089907f224d4ee1e2931416deb62bbde4f281397249c4a54319c43ee455efc348c13f4f9060200160405180910390a450505050505050565b612710811115611bfd5760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420666565207261746560801b604482015260640161057b565b611c0982612710612c8e565b611c138383612c8e565b611c1f61271080612c8e565b611c299190612e88565b611c316117cd565b60008681526002919091016020526040902054611c4e9190612c8e565b611c589190612e74565b611c606117cd565b60008581526002919091016020526040902055611c7f82612710612c8e565b611c898383612c8e565b611c9561271080612c8e565b611c9f9190612e9f565b611ca76117cd565b60008681526003919091016020526040902054611cc49190612c8e565b611cce9190612e74565b611cd66117cd565b60009485526003016020526040909320929092555050565b80611d2f5760405162461bcd60e51b8152602060048201526011602482015270756e69745072696365206973207a65726f60781b604482015260640161057b565b611d376117cd565b6000858152600a919091016020908152604080832086845290915290206003015415611da55760405162461bcd60e51b815260206004820152601860248201527f416c72656164792075706461746564206d617475726974790000000000000000604482015260640161057b565b828211611de75760405162461bcd60e51b815260206004820152601060248201526f496e76616c6964206d6174757269747960801b604482015260640161057b565b611def6117cd565b6000858152600a919091016020908152604080832085845290915290206001015415611e505760405162461bcd60e51b815260206004820152601060248201526f45786973746564206d6174757269747960801b604482015260640161057b565b611e586117cd565b6000858152600a9190910160209081526040808320868452909152902060010154611ec55760405162461bcd60e51b815260206004820152601f60248201527f496e76616c6964206c656e64696e6720636f6d706f756e6420666163746f7200604482015260640161057b565b611ecd6117cd565b6000858152600a9190910160209081526040808320868452909152902060020154611f445760405162461bcd60e51b815260206004820152602160248201527f496e76616c696420626f72726f77696e6720636f6d706f756e6420666163746f6044820152603960f91b606482015260840161057b565b81611f4d6117cd565b6000868152600491909101602052604090205581611f696117cd565b6000868152600a919091016020908152604080832087845282529182902060030192909255805160a08101909152828152908101611fa56117cd565b6002016000878152602001908152602001600020548152602001611fc76117cd565b60030160008781526020019081526020016000205481526020016000815260200184815250611ff46117cd565b6000958652600a0160209081526040808720948752938152948390208151815594810151600186015591820151600285015550606081015160038401556080015160049092019190915550565b6120496117cd565b6000848152600c9190910160209081526040808320858452909152902054156120a95760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b604482015260640161057b565b6120d36120b5846117af565b6120be85610c29565b6120c990600a612c7f565b6105cc9084612c8e565b6120db6117cd565b6000948552600c0160209081526040808620948652939052919092205550565b6000806121066117cd565b6000868152600691909101602090815260408083206001600160a01b038816845290915281205491506121376117cd565b6000878152600b91909101602090815260408083206001600160a01b03891684529091529020549050611200868383876121b2565b60008061217a8585856120fb565b90506121846117cd565b6000958652600601602090815260408087206001600160a01b03909616875294905292909320549391925050565b600080841215806121c35750828211155b806121cc575082155b156121d95750600061152c565b60006121e36117cd565b6000878152600a91909101602090815260408083208784528252808320815160a08101835281548152600182015493810193909352600281015491830191909152600381015460608301526004015460808201529150808061224489610c0b565b90508086111561225b57600094505050505061152c565b808614156122a25761226b6117cd565b60008a8152600391909101602052604090205492506122886117cd565b60008a815260029190910160205260409020549150612309565b60006122ac6117cd565b60008b8152600a91909101602090815260408083208a8452825291829020825160a0810184528154815260018201549281018390526002820154938101849052600382015460608201526004909101546080909101529094509250505b8761233561128b61232a61231f61059b85612b7e565b8789604001516126d4565b8760200151866126d4565b61233e90612b7e565b6123489190612eb7565b9998505050505050505050565b60008161236157600080fd5b600061236d8385612ef6565b61237890600a612dd9565b8361238486600a612dd9565b61238e9190612ef6565b6123989190612eb7565b9050600581126123bf576123ac8385612ef6565b6123b7906001612d98565b9150506104cc565b60041981136123de5760016123d48486612ef6565b6123b79190612eb7565b6123b78385612ef6565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610492565b600080516020612f38833981519152546001600160a01b0316156124765760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c72656164790000000000604482015260640161057b565b600080516020612f3883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60006124af612841565b905090565b600082126125d25760006124c7836117f0565b90506000821261250857806124da6117cd565b600701600086815260200190815260200160002060008282546124fd9190612e9f565b909155506109e99050565b60006125148385612d98565b90506000811261259a57612527816117f0565b61252f6117cd565b600701600087815260200190815260200160002060008282546125529190612e9f565b90915550612564905061059b84612b7e565b61256c6117cd565b6008016000878152602001908152602001600020600082825461258f9190612e88565b9091555061124a9050565b816125a36117cd565b600801600087815260200190815260200160002060008282546125c69190612e88565b90915550505050505050565b60006125e061059b84612b7e565b90506000821361261657806125f36117cd565b600801600086815260200190815260200160002060008282546124fd9190612e9f565b60006126228385612d98565b90506000811361269d5761263861059b82612b7e565b6126406117cd565b600801600087815260200190815260200160002060008282546126639190612e9f565b909155506126729050836117f0565b61267a6117cd565b6007016000878152602001908152602001600020600082825461258f9190612e88565b816126a66117cd565b600701600087815260200190815260200160002060008282546125c69190612e88565b60006104cc82612856565b60008080600019858709858702925082811083820303915050806000141561270e576000841161270357600080fd5b508290049050610600565b80841161271a57600080fd5b600084868809808403938111909203919050600061273a86196001612e9f565b861695869004959384900493600081900304600101905061275b8184612c8e565b90931792600061276c876003612c8e565b600218905061277b8188612c8e565b612786906002612e88565b6127909082612c8e565b905061279c8188612c8e565b6127a7906002612e88565b6127b19082612c8e565b90506127bd8188612c8e565b6127c8906002612e88565b6127d29082612c8e565b90506127de8188612c8e565b6127e9906002612e88565b6127f39082612c8e565b90506127ff8188612c8e565b61280a906002612e88565b6128149082612c8e565b90506128208188612c8e565b61282b906002612e88565b6128359082612c8e565b90506123488186612c8e565b60006124af6a14995cd95c9d99519d5b9960aa1b5b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b031690816128e75760405162461bcd60e51b815260040161057b9190612f24565b5092915050565b6000806040838503121561290157600080fd5b50508035926020909101359150565b60008060006060848603121561292557600080fd5b505081359360208301359350604090920135919050565b6001600160a01b038116811461295157600080fd5b50565b60008060006060848603121561296957600080fd5b83359250602084013561297b8161293c565b929592945050506040919091013590565b60008060008060008060c087890312156129a557600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6020808252825182820181905260009190848201906040850190845b81811015612a07578351835292840192918401916001016129eb565b50909695505050505050565b600060208284031215612a2557600080fd5b5035919050565b60008060408385031215612a3f57600080fd5b823591506020830135612a518161293c565b809150509250929050565b600080600080600060a08688031215612a7457600080fd5b85359450602086013593506040860135612a8d8161293c565b92506060860135612a9d8161293c565b949793965091946080013592915050565b60008060008060808587031215612ac457600080fd5b84359350602085013560ff81168114612adc57600080fd5b93969395505050506040820135916060013590565b60008060008060808587031215612b0757600080fd5b5050823594602084013594506040840135936060013592509050565b60008060008060808587031215612b3957600080fd5b843593506020850135612adc8161293c565b600060208284031215612b5d57600080fd5b81356106008161293c565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b821415612b9457612b94612b68565b5060000390565b600181815b80851115612bd6578160001904821115612bbc57612bbc612b68565b80851615612bc957918102915b93841c9390800290612ba0565b509250929050565b600082612bed575060016104cc565b81612bfa575060006104cc565b8160018114612c105760028114612c1a57612c36565b60019150506104cc565b60ff841115612c2b57612c2b612b68565b50506001821b6104cc565b5060208310610133831016604e8410600b8410161715612c59575081810a6104cc565b612c638383612b9b565b8060001904821115612c7757612c77612b68565b029392505050565b600061060060ff841683612bde565b6000816000190483118215151615612ca857612ca8612b68565b500290565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015612ce957602081850181015186830182015201612ccd565b81811115612cfb576000602083870101525b50601f01601f19169290920160200192915050565b82815260406020820152600061152c6040830184612cc3565b600060208284031215612d3b57600080fd5b81516106008161293c565b6000600019821415612d5a57612d5a612b68565b5060010190565b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b600080821280156001600160ff1b0384900385131615612dba57612dba612b68565b600160ff1b8390038412811615612dd357612dd3612b68565b50500190565b60006001600160ff1b0381841382841380821686840486111615612dff57612dff612b68565b600160ff1b6000871282811687830589121615612e1e57612e1e612b68565b60008712925087820587128484161615612e3a57612e3a612b68565b87850587128184161615612e5057612e50612b68565b505050929093029392505050565b634e487b7160e01b600052601260045260246000fd5b600082612e8357612e83612e5e565b500490565b600082821015612e9a57612e9a612b68565b500390565b60008219821115612eb257612eb2612b68565b500190565b60008083128015600160ff1b850184121615612ed557612ed5612b68565b6001600160ff1b0384018313811615612ef057612ef0612b68565b50500390565b600082612f0557612f05612e5e565b600160ff1b821460001984141615612f1f57612f1f612b68565b500590565b6020815260006106006020830184612cc356fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124018a2646970667358221220b667da29bac66af1907909732d6bdd7375d499a11940d178ff7ee12434f9f85a64736f6c63430008090033",
  "implementation": "0xe3658624A3Aafa064357741Df90d0df52368983F",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "The contact name listed in this method is also needed to be listed `requiredContracts` method."
      },
      "initialize(address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptedContracts()": {
        "notice": "Returns contract names that can call this contract."
      },
      "initialize(address)": {
        "notice": "Initializes the contract."
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      }
    },
    "notice": "Implements the management of the genesis value as an amount for Lending deals.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1183,
        "contract": "contracts/GenesisValueVault.sol:GenesisValueVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1186,
        "contract": "contracts/GenesisValueVault.sol:GenesisValueVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}