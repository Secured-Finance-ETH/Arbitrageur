{
  "address": "0x2f9997629Ff1D73fADA6Dc6824A335fb20e3a731",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCollateral",
          "type": "bool"
        }
      ],
      "name": "CurrencyRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCollateral",
          "type": "bool"
        }
      ],
      "name": "CurrencyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccyIn",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccyOut",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidatorFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptedContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addDepositAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationProtocolFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidatorFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniswapQuoter",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLiquidationAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateralAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getTotalDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUnusedCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUsedCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationProtocolFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidatorFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapQuoter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH9",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_ccys",
          "type": "bytes32[]"
        }
      ],
      "name": "isCollateral",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "isCollateralCurrencies",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isCovered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_unsettledOrderCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_unsettledOrderAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_unsettledOrderSide",
          "type": "uint8"
        }
      ],
      "name": "isCovered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isRegisteredCurrency",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isCollateral",
          "type": "bool"
        }
      ],
      "name": "registerCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeDepositAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationProtocolFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidatorFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapQuoter",
          "type": "address"
        }
      ],
      "name": "setCollateralParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccyFrom",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_ccyTo",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_poolFee",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "_offsetAmount",
          "type": "uint256"
        }
      ],
      "name": "swapDepositAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_isCollateral",
          "type": "bool"
        }
      ],
      "name": "updateCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x27e9db7280597f2c871e48c44298b581ff9e176f7e120a7d8638c2d4072cee26",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x41bd8e3F18229F38d52B5ED3B6BFdc3Bc1b367Bf",
    "transactionIndex": 72,
    "gasUsed": "3096784",
    "logsBloom": "0x
    "blockHash": "0x30cad33dd460f065105ea8b24932cb462a18978d3e631e979a335ea9ff680959",
    "transactionHash": "0x27e9db7280597f2c871e48c44298b581ff9e176f7e120a7d8638c2d4072cee26",
    "logs": [],
    "blockNumber": 8810386,
    "cumulativeGasUsed": "11567797",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3f85b78d4f02b33ea339ac5a99716c70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"}],\"name\":\"CurrencyRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"}],\"name\":\"CurrencyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccyIn\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccyOut\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationProtocolFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatorFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapQuoter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLiquidationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getTotalDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnusedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsedCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationProtocolFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidatorFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapQuoter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH9\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_ccys\",\"type\":\"bytes32[]\"}],\"name\":\"isCollateral\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"isCollateralCurrencies\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isCovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_unsettledOrderCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_unsettledOrderAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_unsettledOrderSide\",\"type\":\"uint8\"}],\"name\":\"isCovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isRegisteredCurrency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isCollateral\",\"type\":\"bool\"}],\"name\":\"registerCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationProtocolFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidatorFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapQuoter\",\"type\":\"address\"}],\"name\":\"setCollateralParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccyFrom\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_ccyTo\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_poolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"_offsetAmount\",\"type\":\"uint256\"}],\"name\":\"swapDepositAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isCollateral\",\"type\":\"bool\"}],\"name\":\"updateCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptedContracts()\":{\"details\":\"The contact name listed in this method is also needed to be listed `requiredContracts` method.\"},\"addDepositAmount(address,bytes32,uint256)\":{\"details\":\"Adds deposit amount.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"deposit(bytes32,uint256)\":{\"details\":\"Deposits funds by the caller into collateral.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\"}},\"depositFrom(address,bytes32,uint256)\":{\"details\":\"Deposits funds by the `from` into collateral.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\",\"_from\":\"user's address\"}},\"getCollateralCurrencies()\":{\"returns\":{\"_0\":\"Array of the currency accepted as collateral\"}},\"getCollateralParameters()\":{\"returns\":{\"liquidationProtocolFeeRate\":\"Liquidation fee rate received by protocol\",\"liquidationThresholdRate\":\"Auto liquidation threshold rate\",\"liquidatorFeeRate\":\"Liquidation fee rate received by liquidators\",\"uniswapQuoter\":\"Uniswap quoter contract address\",\"uniswapRouter\":\"Uniswap router contract address\"}},\"getCoverage(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"coverage\":\"The rate of collateral used\"}},\"getDepositAmount(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The deposited amount\"}},\"getLiquidationAmount(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"liquidationAmount\":\"The the amount to be liquidated\"}},\"getTokenAddress(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The token contract address\"}},\"getTotalCollateralAmount(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"totalCollateralAmount\":\"The total collateral amount in ETH\"}},\"getTotalDepositAmount(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The total deposited amount\"}},\"getUnusedCollateral(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The total amount of unused collateral\"}},\"getUsedCurrencies(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The currency names in bytes32\"}},\"getWithdrawableCollateral(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Maximum amount of ETH that can be withdrawn\"}},\"initialize(address,address,uint256,uint256,uint256,address,address,address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_WETH9\":\"The address of WETH\",\"_liquidationProtocolFeeRate\":\"The liquidation fee rate received by protocol\",\"_liquidationThresholdRate\":\"The liquidation threshold rate\",\"_liquidatorFeeRate\":\"The liquidation fee rate received by liquidators\",\"_owner\":\"The address of the contract owner\",\"_resolver\":\"The address of the Address Resolver contract\",\"_uniswapQuoter\":\"Uniswap quoter contract address\",\"_uniswapRouter\":\"Uniswap router contract address\"}},\"isCollateral(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The boolean if the currency has been registered or not\"}},\"isCollateral(bytes32[])\":{\"params\":{\"_ccys\":\"Currency name list in bytes32\"},\"returns\":{\"isCollateralCurrencies\":\"Array of the boolean if the currency has been registered or not\"}},\"isCovered(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The boolean if the collateral has sufficient coverage or not\"}},\"isCovered(address,bytes32,uint256,uint8)\":{\"params\":{\"_unsettledOrderAmount\":\"Additional unsettled order amount\",\"_unsettledOrderCcy\":\"Additional unsettled order currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The boolean if the collateral has sufficient coverage or not\"}},\"isRegisteredCurrency(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The boolean if the currency has been registered or not\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerCurrency(bytes32,address,bool)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_isCollateral\":\"Boolean if the selected currency is acceptable as collateral.\",\"_tokenAddress\":\"Token contract address of the selected currency\"}},\"removeDepositAmount(address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to withdraw.\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"},\"setCollateralParameters(uint256,uint256,uint256,address,address)\":{\"params\":{\"_liquidationProtocolFeeRate\":\"The liquidation fee rate received by protocol\",\"_liquidationThresholdRate\":\"The auto liquidation threshold rate\",\"_liquidatorFeeRate\":\"The liquidation fee rate received by liquidators\",\"_uniswapQuoter\":\"Uniswap quoter contract address\",\"_uniswapRouter\":\"Uniswap router contract address\"}},\"swapDepositAmounts(address,address,bytes32,bytes32,uint256,uint24,uint256)\":{\"params\":{\"_amountOut\":\"Amount to be converted to\",\"_ccyFrom\":\"Currency name to be converted from\",\"_ccyTo\":\"Currency name to be converted to\",\"_liquidator\":\"Liquidator's address\",\"_offsetAmount\":\"User's deposit amount to be offset against the reserve fund\",\"_poolFee\":\"Uniswap pool fee\",\"_user\":\"User's address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCurrency(bytes32,bool)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_isCollateral\":\"Boolean if the selected currency is acceptable as collateral.\"}},\"withdraw(bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to withdraw.\",\"_ccy\":\"Currency name in bytes32\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptedContracts()\":{\"notice\":\"Returns contract names that can call this contract.\"},\"getCollateralCurrencies()\":{\"notice\":\"Gets the currencies accepted as collateral\"},\"getCollateralParameters()\":{\"notice\":\"Gets the collateral parameters\"},\"getCoverage(address)\":{\"notice\":\"Gets the rate of collateral used.\"},\"getDepositAmount(address,bytes32)\":{\"notice\":\"Gets the amount deposited in the user's collateral.\"},\"getLiquidationAmount(address)\":{\"notice\":\"Gets the amount to be liquidated.\"},\"getTokenAddress(bytes32)\":{\"notice\":\"Gets the token contract address\"},\"getTotalCollateralAmount(address)\":{\"notice\":\"Gets the total collateral amount.\"},\"getTotalDepositAmount(bytes32)\":{\"notice\":\"Gets the total amount deposited of the selected currency\"},\"getUnusedCollateral(address)\":{\"notice\":\"Gets the total amount of the unused collateral\"},\"getUsedCurrencies(address)\":{\"notice\":\"Gets the currencies that the user used as collateral.\"},\"getWithdrawableCollateral(address)\":{\"notice\":\"Gets the maximum amount of ETH that can be withdrawn from user collateral.\"},\"initialize(address,address,uint256,uint256,uint256,address,address,address)\":{\"notice\":\"Initializes the contract.\"},\"isCollateral(bytes32)\":{\"notice\":\"Gets if the currency is acceptable as collateral\"},\"isCollateral(bytes32[])\":{\"notice\":\"Gets if the currencies are acceptable as collateral\"},\"isCovered(address)\":{\"notice\":\"Gets if the collateral has enough coverage.\"},\"isCovered(address,bytes32,uint256,uint8)\":{\"notice\":\"Gets if the collateral has enough coverage.\"},\"isRegisteredCurrency(bytes32)\":{\"notice\":\"Gets if the currency has been registered\"},\"registerCurrency(bytes32,address,bool)\":{\"notice\":\"Registers new currency and sets if it is acceptable as collateral.\"},\"removeDepositAmount(address,bytes32,uint256)\":{\"notice\":\"Removes deposit amount.\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"setCollateralParameters(uint256,uint256,uint256,address,address)\":{\"notice\":\"Sets main collateral parameters this function solves the issue of frontrunning during parameters tuning.Triggers only be contract owner\"},\"swapDepositAmounts(address,address,bytes32,bytes32,uint256,uint24,uint256)\":{\"notice\":\"Swap the deposited amount to convert to a different currency using Uniswap for liquidation.\"},\"updateCurrency(bytes32,bool)\":{\"notice\":\"Updates the currency if it is acceptable as collateral.\"},\"withdraw(bytes32,uint256)\":{\"notice\":\"Withdraws funds by the caller from unused collateral.\"}},\"notice\":\"Implements the management of the token in each currency for users. This contract manages the following data related to tokens. - Deposited token amount as the collateral - Parameters related to the collateral   - Margin Call Threshold Rate   - Auto Liquidation Threshold Rate   - Liquidation Price Rate   - Min Collateral Rate To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenVault.sol\":\"TokenVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/TokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {CollateralParametersHandler as Params} from \\\"./libraries/CollateralParametersHandler.sol\\\";\\nimport {ERC20Handler} from \\\"./libraries/ERC20Handler.sol\\\";\\nimport {DepositManagementLogic} from \\\"./libraries/logics/DepositManagementLogic.sol\\\";\\n// interfaces\\nimport {ITokenVault} from \\\"./interfaces/ITokenVault.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Ownable} from \\\"./utils/Ownable.sol\\\";\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"./storages/TokenVaultStorage.sol\\\";\\n\\n/**\\n * @notice Implements the management of the token in each currency for users.\\n *\\n * This contract manages the following data related to tokens.\\n * - Deposited token amount as the collateral\\n * - Parameters related to the collateral\\n *   - Margin Call Threshold Rate\\n *   - Auto Liquidation Threshold Rate\\n *   - Liquidation Price Rate\\n *   - Min Collateral Rate\\n *\\n * To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.\\n */\\ncontract TokenVault is ITokenVault, MixinAddressResolver, Ownable, Proxyable {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /**\\n     * @notice Modifier to check if currency hasn't been registered yet\\n     * @param _ccy Currency name in bytes32\\n     */\\n    modifier onlyRegisteredCurrency(bytes32 _ccy) {\\n        require(isRegisteredCurrency(_ccy), \\\"Currency not registered\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _owner The address of the contract owner\\n     * @param _resolver The address of the Address Resolver contract\\n     * @param _liquidationThresholdRate The liquidation threshold rate\\n     * @param _liquidationProtocolFeeRate The liquidation fee rate received by protocol\\n     * @param _liquidatorFeeRate The liquidation fee rate received by liquidators\\n     * @param _uniswapRouter Uniswap router contract address\\n     * @param _uniswapQuoter Uniswap quoter contract address\\n     * @param _WETH9 The address of WETH\\n     */\\n    function initialize(\\n        address _owner,\\n        address _resolver,\\n        uint256 _liquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate,\\n        address _uniswapRouter,\\n        address _uniswapQuoter,\\n        address _WETH9\\n    ) public initializer onlyProxy {\\n        _transferOwnership(_owner);\\n        registerAddressResolver(_resolver);\\n\\n        ERC20Handler.initialize(_WETH9);\\n        Params.setCollateralParameters(\\n            _liquidationThresholdRate,\\n            _liquidationProtocolFeeRate,\\n            _liquidatorFeeRate,\\n            _uniswapRouter,\\n            _uniswapQuoter\\n        );\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](3);\\n        contracts[0] = Contracts.CURRENCY_CONTROLLER;\\n        contracts[1] = Contracts.LENDING_MARKET_CONTROLLER;\\n        contracts[2] = Contracts.RESERVE_FUND;\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function acceptedContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](2);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n        contracts[1] = Contracts.RESERVE_FUND;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == ERC20Handler.weth(), \\\"Not WETH\\\");\\n    }\\n\\n    /**\\n     * @notice Gets if the collateral has enough coverage.\\n     * @param _user User's address\\n     * @param _unsettledOrderCcy Additional unsettled order currency name in bytes32\\n     * @param _unsettledOrderAmount Additional unsettled order amount\\n     * @return The boolean if the collateral has sufficient coverage or not\\n     */\\n    function isCovered(\\n        address _user,\\n        bytes32 _unsettledOrderCcy,\\n        uint256 _unsettledOrderAmount,\\n        ProtocolTypes.Side _unsettledOrderSide\\n    ) external view override returns (bool) {\\n        return\\n            DepositManagementLogic.isCovered(\\n                _user,\\n                _unsettledOrderCcy,\\n                _unsettledOrderAmount,\\n                ProtocolTypes.Side.BORROW == _unsettledOrderSide\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets if the collateral has enough coverage.\\n     * @param _user User's address\\n     * @return The boolean if the collateral has sufficient coverage or not\\n     */\\n    function isCovered(address _user) public view override returns (bool) {\\n        return DepositManagementLogic.isCovered(_user, \\\"\\\", 0, false);\\n    }\\n\\n    /**\\n     * @notice Gets if the currency is acceptable as collateral\\n     * @param _ccy Currency name in bytes32\\n     * @return The boolean if the currency has been registered or not\\n     */\\n    function isCollateral(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().collateralCurrencies.contains(_ccy);\\n    }\\n\\n    /**\\n     * @notice Gets if the currencies are acceptable as collateral\\n     * @param _ccys Currency name list in bytes32\\n     * @return isCollateralCurrencies Array of the boolean if the currency has been registered or not\\n     */\\n    function isCollateral(bytes32[] calldata _ccys)\\n        external\\n        view\\n        override\\n        returns (bool[] memory isCollateralCurrencies)\\n    {\\n        isCollateralCurrencies = new bool[](_ccys.length);\\n        for (uint256 i = 0; i < _ccys.length; i++) {\\n            isCollateralCurrencies[i] = isCollateral(_ccys[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets if the currency has been registered\\n     * @param _ccy Currency name in bytes32\\n     * @return The boolean if the currency has been registered or not\\n     */\\n    function isRegisteredCurrency(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().tokenAddresses[_ccy] != address(0);\\n    }\\n\\n    /**\\n     * @notice Gets the token contract address\\n     * @param _ccy Currency name in bytes32\\n     * @return The token contract address\\n     */\\n    function getTokenAddress(bytes32 _ccy) public view override returns (address) {\\n        return Storage.slot().tokenAddresses[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the currencies accepted as collateral\\n     * @return Array of the currency accepted as collateral\\n     */\\n    function getCollateralCurrencies() external view override returns (bytes32[] memory) {\\n        return Storage.slot().collateralCurrencies.values();\\n    }\\n\\n    /**\\n     * @notice Gets the maximum amount of ETH that can be withdrawn from user collateral.\\n     * @param _user User's address\\n     * @return Maximum amount of ETH that can be withdrawn\\n     */\\n    function getWithdrawableCollateral(address _user) external view override returns (uint256) {\\n        return DepositManagementLogic.getWithdrawableCollateral(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the rate of collateral used.\\n     * @param _user User's address\\n     * @return coverage The rate of collateral used\\n     */\\n    function getCoverage(address _user) external view override returns (uint256 coverage) {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral, ) = DepositManagementLogic\\n            .getCollateralAmount(_user);\\n\\n        if (totalCollateral == 0) {\\n            coverage = totalUsedCollateral == 0 ? 0 : type(uint256).max;\\n        } else {\\n            coverage = (totalUsedCollateral * ProtocolTypes.PCT_DIGIT) / totalCollateral;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of the unused collateral\\n     * @param _user User's address\\n     * @return The total amount of unused collateral\\n     */\\n    function getUnusedCollateral(address _user) external view override returns (uint256) {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral, ) = DepositManagementLogic\\n            .getCollateralAmount(_user);\\n\\n        return totalCollateral > totalUsedCollateral ? totalCollateral - totalUsedCollateral : 0;\\n    }\\n\\n    /**\\n     * @notice Gets the total collateral amount.\\n     * @param _user User's address\\n     * @return totalCollateralAmount The total collateral amount in ETH\\n     */\\n    function getTotalCollateralAmount(address _user)\\n        public\\n        view\\n        override\\n        returns (uint256 totalCollateralAmount)\\n    {\\n        (totalCollateralAmount, , ) = DepositManagementLogic.getCollateralAmount(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the amount to be liquidated.\\n     * @param _user User's address\\n     * @return liquidationAmount The the amount to be liquidated\\n     */\\n    function getLiquidationAmount(address _user)\\n        external\\n        view\\n        override\\n        returns (uint256 liquidationAmount)\\n    {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral, ) = DepositManagementLogic\\n            .getCollateralAmount(_user);\\n\\n        return\\n            totalCollateral * ProtocolTypes.PCT_DIGIT >=\\n                totalUsedCollateral * Params.liquidationThresholdRate()\\n                ? 0\\n                : totalUsedCollateral / 2;\\n    }\\n\\n    /**\\n     * @notice Gets the total amount deposited of the selected currency\\n     * @param _ccy Currency name in bytes32\\n     * @return The total deposited amount\\n     */\\n    function getTotalDepositAmount(bytes32 _ccy) external view override returns (uint256) {\\n        return Storage.slot().totalDepositAmount[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the amount deposited in the user's collateral.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @return The deposited amount\\n     */\\n    function getDepositAmount(address _user, bytes32 _ccy)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return DepositManagementLogic.getDepositAmount(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Gets the currencies that the user used as collateral.\\n     * @param _user User's address\\n     * @return The currency names in bytes32\\n     */\\n    function getUsedCurrencies(address _user) public view override returns (bytes32[] memory) {\\n        return DepositManagementLogic.getUsedCurrencies(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the collateral parameters\\n     * @return liquidationThresholdRate Auto liquidation threshold rate\\n     * @return liquidationProtocolFeeRate Liquidation fee rate received by protocol\\n     * @return liquidatorFeeRate Liquidation fee rate received by liquidators\\n     * @return uniswapRouter Uniswap router contract address\\n     * @return uniswapQuoter Uniswap quoter contract address\\n     */\\n    function getCollateralParameters()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 liquidationThresholdRate,\\n            uint256 liquidationProtocolFeeRate,\\n            uint256 liquidatorFeeRate,\\n            address uniswapRouter,\\n            address uniswapQuoter\\n        )\\n    {\\n        liquidationThresholdRate = Params.liquidationThresholdRate();\\n        liquidationProtocolFeeRate = Params.liquidationProtocolFeeRate();\\n        liquidatorFeeRate = Params.liquidatorFeeRate();\\n        uniswapRouter = address(Params.uniswapRouter());\\n        uniswapQuoter = address(Params.uniswapQuoter());\\n    }\\n\\n    /**\\n     * @notice Registers new currency and sets if it is acceptable as collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _tokenAddress Token contract address of the selected currency\\n     * @param _isCollateral Boolean if the selected currency is acceptable as collateral.\\n     */\\n    function registerCurrency(\\n        bytes32 _ccy,\\n        address _tokenAddress,\\n        bool _isCollateral\\n    ) external onlyOwner {\\n        require(currencyController().currencyExists(_ccy), \\\"Invalid currency\\\");\\n\\n        Storage.slot().tokenAddresses[_ccy] = _tokenAddress;\\n        if (_isCollateral) {\\n            Storage.slot().collateralCurrencies.add(_ccy);\\n        }\\n\\n        emit CurrencyRegistered(_ccy, _tokenAddress, _isCollateral);\\n    }\\n\\n    /**\\n     * @notice Updates the currency if it is acceptable as collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _isCollateral Boolean if the selected currency is acceptable as collateral.\\n     */\\n    function updateCurrency(bytes32 _ccy, bool _isCollateral)\\n        external\\n        onlyOwner\\n        onlyRegisteredCurrency(_ccy)\\n    {\\n        if (_isCollateral) {\\n            Storage.slot().collateralCurrencies.add(_ccy);\\n        } else {\\n            Storage.slot().collateralCurrencies.remove(_ccy);\\n        }\\n\\n        emit CurrencyUpdated(_ccy, _isCollateral);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the caller into collateral.\\n     * @param _amount Amount of funds to deposit\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function deposit(bytes32 _ccy, uint256 _amount)\\n        external\\n        payable\\n        override\\n        onlyRegisteredCurrency(_ccy)\\n    {\\n        _deposit(msg.sender, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the `from` into collateral.\\n     * @param _from user's address\\n     * @param _amount Amount of funds to deposit\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function depositFrom(\\n        address _from,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external payable override onlyAcceptedContracts {\\n        _deposit(_from, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws funds by the caller from unused collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to withdraw.\\n     */\\n    function withdraw(bytes32 _ccy, uint256 _amount)\\n        external\\n        override\\n        onlyRegisteredCurrency(_ccy)\\n    {\\n        _withdraw(msg.sender, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @dev Adds deposit amount.\\n     * @param _user User's address\\n     * @param _amount Amount of funds to deposit\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function addDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override onlyAcceptedContracts onlyRegisteredCurrency(_ccy) {\\n        DepositManagementLogic.addDepositAmount(_user, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Removes deposit amount.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to withdraw.\\n     */\\n    function removeDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override onlyAcceptedContracts onlyRegisteredCurrency(_ccy) {\\n        DepositManagementLogic.removeDepositAmount(_user, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Swap the deposited amount to convert to a different currency using Uniswap for liquidation.\\n     * @param _liquidator Liquidator's address\\n     * @param _user User's address\\n     * @param _ccyFrom Currency name to be converted from\\n     * @param _ccyTo Currency name to be converted to\\n     * @param _amountOut Amount to be converted to\\n     * @param _poolFee Uniswap pool fee\\n     * @param _offsetAmount User's deposit amount to be offset against the reserve fund\\n     */\\n    function swapDepositAmounts(\\n        address _liquidator,\\n        address _user,\\n        bytes32 _ccyFrom,\\n        bytes32 _ccyTo,\\n        uint256 _amountOut,\\n        uint24 _poolFee,\\n        uint256 _offsetAmount\\n    ) external override onlyAcceptedContracts returns (uint256 amountOut) {\\n        require(isCollateral(_ccyFrom), \\\"Not registered as collateral\\\");\\n\\n        uint256 amountIn;\\n        uint256 liquidatorFee;\\n        uint256 protocolFee;\\n\\n        (amountOut, amountIn, liquidatorFee, protocolFee) = DepositManagementLogic\\n            .swapDepositAmounts(\\n                _liquidator,\\n                _user,\\n                _ccyFrom,\\n                _ccyTo,\\n                _amountOut,\\n                _poolFee,\\n                _offsetAmount\\n            );\\n\\n        emit Swap(\\n            _user,\\n            _ccyFrom,\\n            _ccyTo,\\n            amountIn,\\n            amountOut + _offsetAmount,\\n            liquidatorFee,\\n            protocolFee\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets main collateral parameters this function\\n     * solves the issue of frontrunning during parameters tuning.\\n     *\\n     * @param _liquidationThresholdRate The auto liquidation threshold rate\\n     * @param _liquidationProtocolFeeRate The liquidation fee rate received by protocol\\n     * @param _liquidatorFeeRate The liquidation fee rate received by liquidators\\n     * @param _uniswapRouter Uniswap router contract address\\n     * @param _uniswapQuoter Uniswap quoter contract address\\n     * @notice Triggers only be contract owner\\n     */\\n    function setCollateralParameters(\\n        uint256 _liquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate,\\n        address _uniswapRouter,\\n        address _uniswapQuoter\\n    ) external override onlyOwner {\\n        Params.setCollateralParameters(\\n            _liquidationThresholdRate,\\n            _liquidationProtocolFeeRate,\\n            _liquidatorFeeRate,\\n            _uniswapRouter,\\n            _uniswapQuoter\\n        );\\n    }\\n\\n    function _deposit(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n        require(\\n            Storage.slot().tokenAddresses[_ccy] != ERC20Handler.weth() || _amount == msg.value,\\n            \\\"Invalid amount\\\"\\n        );\\n\\n        ERC20Handler.depositAssets(\\n            Storage.slot().tokenAddresses[_ccy],\\n            _user,\\n            address(this),\\n            _amount\\n        );\\n        DepositManagementLogic.addDepositAmount(_user, _ccy, _amount);\\n\\n        emit Deposit(_user, _ccy, _amount);\\n    }\\n\\n    function _withdraw(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n\\n        lendingMarketController().cleanUpFunds(_ccy, _user);\\n        uint256 withdrawableAmount = DepositManagementLogic.withdraw(_user, _ccy, _amount);\\n        ERC20Handler.withdrawAssets(Storage.slot().tokenAddresses[_ccy], _user, withdrawableAmount);\\n\\n        emit Withdraw(_user, _ccy, withdrawableAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x96351247943c0a9e272e18340d06d68214b88a6229c18f7527ab2e8d2191eb7d\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x85fea92a32d4ac0f08532d339ceeef07a468748ab7628bd2fd60980090e53a5d\",\"license\":\"MIT\"},\"contracts/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IBeaconProxyController {\\n    event BeaconProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 openingDate\\n    ) external returns (address market);\\n}\\n\",\"keccak256\":\"0xcedc431629fa9537e673fc37ceae4cc645cf1f4ff9071b05396b9e3944ce6dd9\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Currency} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedAdded(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n    event PriceFeedRemoved(bytes32 ccy, string secondCcy, address indexed priceFeed);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount) external view returns (uint256 amount);\\n\\n    function convertToETH(bytes32 _ccy, int256 _amount) external view returns (int256 amount);\\n\\n    function convertToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getEthDecimals(bytes32) external view returns (uint8);\\n\\n    function getUsdDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId) external view returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        address _ethPriceFeed,\\n        uint256 _haircut\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0x9f2a9f700546079ae054a7904b66ff83a1fa9a5643a0cb7ae1766a0dc265ec50\",\"license\":\"MIT\"},\"contracts/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 _ccy, uint256 _maturity)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(bytes32 ccy, uint256 maturity)\\n        external\\n        view\\n        returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 _ccy) external view returns (AutoRollLog memory);\\n\\n    function getGenesisValueInFutureValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function calculateFVFromFV(\\n        bytes32 _ccy,\\n        uint256 _basisMaturity,\\n        uint256 _destinationMaturity,\\n        int256 _futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateInitialCompoundFactor(bytes32 _ccy, uint256 _unitPrice) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 feeRate,\\n        uint256 totalFVAmount\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function offsetGenesisValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address lender,\\n        address borrower,\\n        int256 maximumGVAmount\\n    ) external returns (int256 offsetAmount);\\n\\n    function cleanUpGenesisValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4abb002bd8a3fdcc4a6b4734a5b9f6fb2bb0d2bdaf61911ef74ad2ab3b686cda\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ILendingMarketController {\\n    event LendingMarketCreated(\\n        bytes32 indexed ccy,\\n        address indexed marketAddr,\\n        address futureValueVault,\\n        uint256 index,\\n        uint256 openingDate,\\n        uint256 maturity\\n    );\\n    event LendingMarketsRotated(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n    event LiquidationExecuted(\\n        address indexed user,\\n        bytes32 collateralCcy,\\n        bytes32 indexed debtCcy,\\n        uint256 indexed debtMaturity,\\n        uint256 amount\\n    );\\n\\n    function isLiquidator(address user) external view returns (bool);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarkets(bytes32 ccy) external view returns (address[] memory);\\n\\n    function getLendingMarket(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getBorrowUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getLendUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getMidUnitPrices(bytes32 ccy) external view returns (uint256[] memory unitPrices);\\n\\n    function getBorrowOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getLendOrderBook(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getFutureValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (int256 futureValue);\\n\\n    function getPresentValue(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (int256 presentValue);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInETH(address user)\\n        external\\n        view\\n        returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(bytes32 ccy, address user) external view returns (int256 genesisValue);\\n\\n    function calculateFunds(bytes32 ccy, address user)\\n        external\\n        view\\n        returns (\\n            uint256 workingLendOrdersAmount,\\n            uint256 claimableAmount,\\n            uint256 collateralAmount,\\n            uint256 lentAmount,\\n            uint256 workingBorrowOrdersAmount,\\n            uint256 debtAmount,\\n            uint256 borrowedAmount\\n        );\\n\\n    function calculateTotalFundsInETH(\\n        address user,\\n        bytes32 depositCcy,\\n        uint256 depositAmount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalWorkingLendOrdersAmount,\\n            uint256 totalClaimableAmount,\\n            uint256 totalCollateralAmount,\\n            uint256 totalLentAmount,\\n            uint256 totalWorkingBorrowOrdersAmount,\\n            uint256 totalDebtAmount,\\n            uint256 totalBorrowedAmount,\\n            bool isEnoughDeposit\\n        );\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 autoRollFeeRate\\n    ) external;\\n\\n    function createLendingMarket(bytes32 ccy, uint256 marketOpeningDate) external;\\n\\n    function createOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreateOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function createPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndCreatePreOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external payable returns (bool);\\n\\n    function unwindOrder(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeItayoseCalls(bytes32[] memory currencies, uint256 maturity)\\n        external\\n        returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user,\\n        uint24 poolFee\\n    ) external returns (bool);\\n\\n    function registerLiquidator(bool isLiquidator) external;\\n\\n    function cancelOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint48 orderId\\n    ) external returns (bool);\\n\\n    function rotateLendingMarkets(bytes32 ccy) external;\\n\\n    function pauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarkets(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external;\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n}\\n\",\"keccak256\":\"0xa18837f65e741d8057303f277850099726d062b15de40527e2d89fe9f8ee95b4\",\"license\":\"MIT\"},\"contracts/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa2a6df7a095ca8f8874d26672f75fe1f09c45caf041cb27d5e265bcb974a9754\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\ninterface ITokenVault {\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n    event Swap(\\n        address indexed user,\\n        bytes32 ccyIn,\\n        bytes32 ccyOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 liquidatorFee,\\n        uint256 protocolFee\\n    );\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy,\\n        uint256 unsettledExp,\\n        ProtocolTypes.Side unsettledOrderSide\\n    ) external view returns (bool);\\n\\n    function isCovered(address user) external view returns (bool);\\n\\n    function isCollateral(bytes32 _ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata _ccys)\\n        external\\n        view\\n        returns (bool[] memory isCollateralCurrencies);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw);\\n\\n    function getCoverage(address user) external view returns (uint256 coverage);\\n\\n    function getUnusedCollateral(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address party) external view returns (uint256);\\n\\n    function getLiquidationAmount(address user) external view returns (uint256 liquidationAmount);\\n\\n    function getTotalDepositAmount(bytes32 _ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getCollateralParameters()\\n        external\\n        view\\n        returns (\\n            uint256 liquidationThresholdRate,\\n            uint256 liquidationProtocolFeeRate,\\n            uint256 liquidatorFeeRate,\\n            address uniswapRouter,\\n            address uniswapQuoter\\n        );\\n\\n    function setCollateralParameters(\\n        uint256 liquidationThresholdRate,\\n        uint256 liquidationProtocolFeeRate,\\n        uint256 liquidatorFeeRate,\\n        address uniswapRouter,\\n        address uniswapQuoter\\n    ) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function removeDepositAmount(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function swapDepositAmounts(\\n        address liquidator,\\n        address user,\\n        bytes32 ccyFrom,\\n        bytes32 ccyTo,\\n        uint256 amountOut,\\n        uint24 poolFee,\\n        uint256 offsetAmount\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x4aeca00b083b242247a0df9cc2f0de7a669314058729ac8830f73f6a5d28f520\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    event Deposit(address user, uint256 amount);\\n    event Withdrawal(address user, uint256 amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5aefa06efedcbfe7d7605aa67217f066a0e84b450d416695254eb95239a251d7\",\"license\":\"MIT\"},\"contracts/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0x65d55399d6c8b753ddaa36c1370fae1c68dfbfb8b6b2d09b1717ba037b079998\",\"license\":\"MIT\"},\"contracts/libraries/CollateralParametersHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ISwapRouter} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport {IQuoter} from \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\nimport {CollateralParametersStorage as Storage} from \\\"../storages/CollateralParametersStorage.sol\\\";\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\n\\n/**\\n * @notice CollateralParametersHandler is an library to handle the main collateral parameters.\\n */\\nlibrary CollateralParametersHandler {\\n    event AutoLiquidationThresholdRateUpdated(uint256 previousRate, uint256 ratio);\\n    event LiquidationProtocolFeeRateUpdated(uint256 previousRate, uint256 ratio);\\n    event LiquidatorFeeRateUpdated(uint256 previousRate, uint256 ratio);\\n    event UniswapRouterUpdated(address previousUniswapRouter, address uniswapRouter);\\n    event UniswapQuoterUpdated(address previousUniswapQuoter, address uniswapQuoter);\\n\\n    /**\\n     * @dev Gets the liquidation threshold rate\\n     * @return The liquidation threshold rate\\n     */\\n    function liquidationThresholdRate() internal view returns (uint256) {\\n        return Storage.slot().liquidationThresholdRate;\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation fee received by liquidators\\n     * @return The liquidation fee received by liquidators\\n     */\\n    function liquidatorFeeRate() internal view returns (uint256) {\\n        return Storage.slot().liquidatorFeeRate;\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation protocol fee received by protocol\\n     * @return The liquidation protocol fee received by protocol\\n     */\\n    function liquidationProtocolFeeRate() internal view returns (uint256) {\\n        return Storage.slot().liquidationProtocolFeeRate;\\n    }\\n\\n    /**\\n     * @dev Gets Uniswap Router contract address\\n     */\\n    function uniswapRouter() internal view returns (ISwapRouter) {\\n        return Storage.slot().uniswapRouter;\\n    }\\n\\n    /**\\n     * @dev Gets Uniswap Quoter contract address\\n     */\\n    function uniswapQuoter() internal view returns (IQuoter) {\\n        return Storage.slot().uniswapQuoter;\\n    }\\n\\n    /**\\n     * @dev Sets main collateral parameters this function\\n     * solves the issue of frontrunning during parameters tuning\\n     * @param _liquidationThresholdRate The liquidation threshold rate\\n     * @param _liquidationProtocolFeeRate The liquidation fee rate received by protocol\\n     * @param _liquidatorFeeRate The liquidation fee rate received by liquidators\\n     * @param _uniswapRouter Uniswap router contract address\\n     * @param _uniswapQuoter Uniswap quoter contract address\\n     * @notice Triggers only be contract owner\\n     */\\n    function setCollateralParameters(\\n        uint256 _liquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate,\\n        address _uniswapRouter,\\n        address _uniswapQuoter\\n    ) internal {\\n        require(_liquidationThresholdRate > 0, \\\"Invalid liquidation threshold rate\\\");\\n        require(\\n            _liquidationProtocolFeeRate <= ProtocolTypes.PCT_DIGIT,\\n            \\\"Invalid liquidation protocol fee rate\\\"\\n        );\\n        require(_liquidatorFeeRate <= ProtocolTypes.PCT_DIGIT, \\\"Invalid liquidator fee rate\\\");\\n        require(_uniswapRouter != address(0), \\\"Invalid Uniswap Router\\\");\\n        require(_uniswapQuoter != address(0), \\\"Invalid Uniswap Quoter\\\");\\n\\n        if (_liquidationThresholdRate != Storage.slot().liquidationThresholdRate) {\\n            emit AutoLiquidationThresholdRateUpdated(\\n                Storage.slot().liquidationThresholdRate,\\n                _liquidationThresholdRate\\n            );\\n            Storage.slot().liquidationThresholdRate = _liquidationThresholdRate;\\n        }\\n\\n        if (_liquidationProtocolFeeRate != Storage.slot().liquidationProtocolFeeRate) {\\n            emit LiquidationProtocolFeeRateUpdated(\\n                Storage.slot().liquidationProtocolFeeRate,\\n                _liquidationProtocolFeeRate\\n            );\\n            Storage.slot().liquidationProtocolFeeRate = _liquidationProtocolFeeRate;\\n        }\\n\\n        if (_liquidatorFeeRate != Storage.slot().liquidatorFeeRate) {\\n            Storage.slot().liquidatorFeeRate = _liquidatorFeeRate;\\n            emit LiquidatorFeeRateUpdated(Storage.slot().liquidatorFeeRate, _liquidatorFeeRate);\\n        }\\n\\n        if (_uniswapRouter != address(Storage.slot().uniswapRouter)) {\\n            emit UniswapRouterUpdated(address(Storage.slot().uniswapRouter), _uniswapRouter);\\n            Storage.slot().uniswapRouter = ISwapRouter(_uniswapRouter);\\n        }\\n\\n        if (_uniswapQuoter != address(Storage.slot().uniswapQuoter)) {\\n            emit UniswapQuoterUpdated(address(Storage.slot().uniswapQuoter), _uniswapQuoter);\\n            Storage.slot().uniswapQuoter = IQuoter(_uniswapQuoter);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4f19bac92b0afc3a15dbbcdd6f15c53b56ab7b13e34792ef04941d1687c2f900\",\"license\":\"MIT\"},\"contracts/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n}\\n\",\"keccak256\":\"0x8e73eead72efa03bcc03c1cdf72cdcebed0f7e6f5a58cda1fd74e0fc03f356e6\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IWETH9} from \\\"../interfaces/IWETH9.sol\\\";\\nimport {ERC20Storage as Storage} from \\\"../storages/ERC20Storage.sol\\\";\\n\\nlibrary ERC20Handler {\\n    function initialize(address _weth) internal {\\n        require(Storage.slot().weth == address(0), \\\"Already initialized\\\");\\n        Storage.slot().weth = _weth;\\n    }\\n\\n    function weth() internal view returns (address) {\\n        return Storage.slot().weth;\\n    }\\n\\n    function depositAssets(\\n        address _token,\\n        address _payer,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().weth) {\\n            wrapWETH(_receiver, _amount);\\n        } else {\\n            safeTransferFrom(_token, _payer, _receiver, _amount);\\n        }\\n    }\\n\\n    function withdrawAssets(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().weth) {\\n            unwrapWETH(_receiver, _amount);\\n        } else {\\n            safeTransfer(_token, _receiver, _amount);\\n        }\\n    }\\n\\n    function wrapWETH(address _receiver, uint256 _amount) internal {\\n        require(address(this).balance >= _amount, \\\"Insufficient ETH\\\");\\n\\n        IWETH9(Storage.slot().weth).deposit{value: _amount}();\\n        IWETH9(Storage.slot().weth).transfer(_receiver, _amount);\\n    }\\n\\n    function unwrapWETH(address _receiver, uint256 _amount) internal {\\n        uint256 balanceWETH9 = IWETH9(Storage.slot().weth).balanceOf(address(this));\\n        require(balanceWETH9 >= _amount, \\\"Insufficient WETH\\\");\\n\\n        if (balanceWETH9 > 0) {\\n            IWETH9(Storage.slot().weth).withdraw(_amount);\\n            safeTransferETH(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        ); // ERC20 Transfer failed\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x815d7e717efb9e9f837464cdcf19feb7a08f4166e145481fcd35f679050526c3\",\"license\":\"MIT\"},\"contracts/libraries/logics/DepositManagementLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {ISwapRouter} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {CollateralParametersHandler as Params} from \\\"../CollateralParametersHandler.sol\\\";\\nimport {ERC20Handler} from \\\"../ERC20Handler.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"../../storages/TokenVaultStorage.sol\\\";\\n\\nlibrary DepositManagementLogic {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    struct CalculatedFundVars {\\n        uint256 workingLendOrdersAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n        bool isEnoughDeposit;\\n    }\\n\\n    struct SwapDepositAmountsVars {\\n        uint256 userDepositAmount;\\n        uint256 depositAmount;\\n        uint256 amountOutWithFee;\\n        uint256 estimatedAmountOut;\\n    }\\n\\n    function isCovered(\\n        address _user,\\n        bytes32 _unsettledOrderCcy,\\n        uint256 _unsettledOrderAmount,\\n        bool _isUnsettledBorrowOrder\\n    ) public view returns (bool) {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral, ) = getCollateralAmount(\\n            _user,\\n            _unsettledOrderCcy,\\n            _unsettledOrderAmount,\\n            _isUnsettledBorrowOrder\\n        );\\n\\n        return\\n            totalUsedCollateral == 0 ||\\n            (totalCollateral * ProtocolTypes.PCT_DIGIT >=\\n                totalUsedCollateral * Params.liquidationThresholdRate());\\n    }\\n\\n    function getUsedCurrencies(address _user) public view returns (bytes32[] memory) {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n\\n        uint256 numCurrencies = currencySet.length();\\n        bytes32[] memory currencies = new bytes32[](numCurrencies);\\n\\n        for (uint256 i = 0; i < numCurrencies; i++) {\\n            bytes32 currency = currencySet.at(i);\\n            currencies[i] = currency;\\n        }\\n\\n        return currencies;\\n    }\\n\\n    function getDepositAmount(address _user, bytes32 _ccy) public view returns (uint256) {\\n        (\\n            uint256 workingLendOrdersAmount,\\n            ,\\n            ,\\n            uint256 lentAmount,\\n            ,\\n            ,\\n            uint256 borrowedAmount\\n        ) = AddressResolverLib.lendingMarketController().calculateFunds(_ccy, _user);\\n\\n        return\\n            Storage.slot().depositAmounts[_user][_ccy] +\\n            borrowedAmount -\\n            lentAmount -\\n            workingLendOrdersAmount;\\n    }\\n\\n    function getCollateralAmount(address _user)\\n        public\\n        view\\n        returns (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalActualCollateral\\n        )\\n    {\\n        return getCollateralAmount(_user, \\\"\\\", 0, false);\\n    }\\n\\n    function getCollateralAmount(\\n        address _user,\\n        bytes32 _unsettledOrderCcy,\\n        uint256 _unsettledOrderAmount,\\n        bool _isUnsettledBorrowOrder\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalActualCollateral\\n        )\\n    {\\n        CalculatedFundVars memory vars;\\n\\n        uint256 depositAmount = Storage.slot().depositAmounts[_user][_unsettledOrderCcy];\\n        uint256 unsettledBorrowOrdersAmountInETH;\\n\\n        if (_unsettledOrderAmount > 0) {\\n            if (_isUnsettledBorrowOrder) {\\n                unsettledBorrowOrdersAmountInETH = AddressResolverLib\\n                    .currencyController()\\n                    .convertToETH(_unsettledOrderCcy, _unsettledOrderAmount);\\n            } else {\\n                require(\\n                    depositAmount >= _unsettledOrderAmount,\\n                    \\\"Not enough collateral in the selected currency\\\"\\n                );\\n                depositAmount -= _unsettledOrderAmount;\\n\\n                if (Storage.slot().collateralCurrencies.contains(_unsettledOrderCcy)) {\\n                    vars.workingLendOrdersAmount += AddressResolverLib\\n                        .currencyController()\\n                        .convertToETH(_unsettledOrderCcy, _unsettledOrderAmount);\\n                }\\n            }\\n        }\\n\\n        (\\n            vars.workingLendOrdersAmount,\\n            ,\\n            vars.collateralAmount,\\n            vars.lentAmount,\\n            vars.workingBorrowOrdersAmount,\\n            vars.debtAmount,\\n            vars.borrowedAmount,\\n            vars.isEnoughDeposit\\n        ) = AddressResolverLib.lendingMarketController().calculateTotalFundsInETH(\\n            _user,\\n            _unsettledOrderCcy,\\n            depositAmount\\n        );\\n\\n        require(\\n            vars.isEnoughDeposit || _isUnsettledBorrowOrder || _unsettledOrderAmount == 0,\\n            \\\"Not enough collateral in the selected currency\\\"\\n        );\\n\\n        uint256 totalInternalDepositAmount = _getTotalInternalDepositAmountInETH(_user);\\n\\n        uint256 actualPlusCollateral = totalInternalDepositAmount + vars.borrowedAmount;\\n        uint256 minusCollateral = vars.workingLendOrdersAmount + vars.lentAmount;\\n        uint256 plusCollateral = actualPlusCollateral + vars.collateralAmount;\\n\\n        totalCollateral = plusCollateral >= minusCollateral ? plusCollateral - minusCollateral : 0;\\n        totalUsedCollateral =\\n            vars.workingBorrowOrdersAmount +\\n            vars.debtAmount +\\n            unsettledBorrowOrdersAmountInETH;\\n        totalActualCollateral = actualPlusCollateral >= minusCollateral\\n            ? actualPlusCollateral - minusCollateral\\n            : 0;\\n    }\\n\\n    /**\\n     * @notice Calculates maximum amount of ETH that can be withdrawn.\\n     * @param _user User's address\\n     * @return Maximum amount of ETH that can be withdrawn\\n     */\\n    function getWithdrawableCollateral(address _user) public view returns (uint256) {\\n        (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalActualCollateral\\n        ) = getCollateralAmount(_user);\\n\\n        if (totalUsedCollateral == 0) {\\n            return totalActualCollateral;\\n        } else if (\\n            totalCollateral * ProtocolTypes.PRICE_DIGIT >\\n            totalUsedCollateral * Params.liquidationThresholdRate()\\n        ) {\\n            // NOTE: The formula is:\\n            // maxWithdraw = totalCollateral - ((totalUsedCollateral) * marginCallThresholdRate).\\n            uint256 maxWithdraw = (totalCollateral *\\n                ProtocolTypes.PRICE_DIGIT -\\n                (totalUsedCollateral) *\\n                Params.liquidationThresholdRate()) / ProtocolTypes.PRICE_DIGIT;\\n            return maxWithdraw >= totalActualCollateral ? totalActualCollateral : maxWithdraw;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function addDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) public {\\n        Storage.slot().depositAmounts[_user][_ccy] += _amount;\\n        Storage.slot().totalDepositAmount[_ccy] += _amount;\\n\\n        _updateUsedCurrencies(_user, _ccy);\\n    }\\n\\n    function removeDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) public {\\n        require(\\n            Storage.slot().depositAmounts[_user][_ccy] >= _amount,\\n            \\\"Not enough collateral in the selected currency\\\"\\n        );\\n\\n        Storage.slot().depositAmounts[_user][_ccy] -= _amount;\\n        Storage.slot().totalDepositAmount[_ccy] -= _amount;\\n\\n        _updateUsedCurrencies(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Withdraws funds by the caller from unused collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to withdraw.\\n     */\\n    function withdraw(\\n        address user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) public returns (uint256 withdrawableAmount) {\\n        uint256 depositAmount = Storage.slot().depositAmounts[user][_ccy];\\n        if (Storage.slot().collateralCurrencies.contains(_ccy)) {\\n            uint256 maxWithdrawETH = getWithdrawableCollateral(user);\\n            uint256 maxWithdraw = AddressResolverLib.currencyController().convertFromETH(\\n                _ccy,\\n                maxWithdrawETH\\n            );\\n\\n            withdrawableAmount = _amount > maxWithdraw ? maxWithdraw : _amount;\\n            withdrawableAmount = depositAmount >= withdrawableAmount\\n                ? withdrawableAmount\\n                : depositAmount;\\n        } else {\\n            withdrawableAmount = depositAmount;\\n        }\\n\\n        removeDepositAmount(user, _ccy, withdrawableAmount);\\n\\n        return withdrawableAmount;\\n    }\\n\\n    function swapDepositAmounts(\\n        address _liquidator,\\n        address _user,\\n        bytes32 _ccyFrom,\\n        bytes32 _ccyTo,\\n        uint256 _amountOut,\\n        uint24 _poolFee,\\n        uint256 _offsetAmount\\n    )\\n        public\\n        returns (\\n            uint256 amountOut,\\n            uint256 amountInWithFee,\\n            uint256 liquidatorFee,\\n            uint256 protocolFee\\n        )\\n    {\\n        SwapDepositAmountsVars memory vars;\\n        address reserveFund = address(AddressResolverLib.reserveFund());\\n\\n        vars.userDepositAmount = Storage.slot().depositAmounts[_user][_ccyFrom];\\n        vars.depositAmount = vars.userDepositAmount;\\n\\n        if (!AddressResolverLib.reserveFund().isPaused()) {\\n            vars.depositAmount += Storage.slot().depositAmounts[reserveFund][_ccyFrom];\\n        }\\n\\n        require(vars.depositAmount > 0, \\\"No deposit amount in the selected currency\\\");\\n\\n        vars.amountOutWithFee =\\n            (_amountOut * ProtocolTypes.PCT_DIGIT) /\\n            (ProtocolTypes.PCT_DIGIT -\\n                Params.liquidatorFeeRate() -\\n                Params.liquidationProtocolFeeRate());\\n\\n        vars.estimatedAmountOut = Params.uniswapQuoter().quoteExactInputSingle(\\n            Storage.slot().tokenAddresses[_ccyFrom],\\n            Storage.slot().tokenAddresses[_ccyTo],\\n            _poolFee,\\n            vars.depositAmount,\\n            0\\n        );\\n\\n        if (vars.amountOutWithFee > vars.estimatedAmountOut) {\\n            vars.amountOutWithFee = vars.estimatedAmountOut;\\n        }\\n\\n        amountInWithFee = _executeSwap(\\n            _ccyFrom,\\n            _ccyTo,\\n            vars.amountOutWithFee,\\n            vars.depositAmount,\\n            _poolFee\\n        );\\n\\n        liquidatorFee =\\n            (vars.amountOutWithFee * Params.liquidatorFeeRate()) /\\n            ProtocolTypes.PCT_DIGIT;\\n\\n        if (vars.amountOutWithFee == vars.estimatedAmountOut) {\\n            protocolFee =\\n                (vars.amountOutWithFee * Params.liquidationProtocolFeeRate()) /\\n                ProtocolTypes.PCT_DIGIT;\\n            amountOut = vars.amountOutWithFee - liquidatorFee - protocolFee - _offsetAmount;\\n        } else {\\n            protocolFee = vars.amountOutWithFee - _amountOut - liquidatorFee;\\n            amountOut = _amountOut - _offsetAmount;\\n        }\\n\\n        if (amountInWithFee > vars.userDepositAmount) {\\n            removeDepositAmount(_user, _ccyFrom, vars.userDepositAmount);\\n            removeDepositAmount(reserveFund, _ccyFrom, amountInWithFee - vars.userDepositAmount);\\n        } else {\\n            removeDepositAmount(_user, _ccyFrom, amountInWithFee);\\n        }\\n\\n        addDepositAmount(_user, _ccyTo, amountOut);\\n        addDepositAmount(_liquidator, _ccyTo, liquidatorFee);\\n        addDepositAmount(reserveFund, _ccyTo, protocolFee);\\n    }\\n\\n    /**\\n     * @notice Gets the total of amount deposited in the user's collateral of all currencies\\n     *  in this contract by converting it to ETH.\\n     * @param _user Address of collateral user\\n     * @return totalDepositAmount The total deposited amount in ETH\\n     */\\n    function _getTotalInternalDepositAmountInETH(address _user)\\n        internal\\n        view\\n        returns (uint256 totalDepositAmount)\\n    {\\n        EnumerableSet.Bytes32Set storage currencies = Storage.slot().usedCurrencies[_user];\\n        uint256 len = currencies.length();\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes32 ccy = currencies.at(i);\\n            if (Storage.slot().collateralCurrencies.contains(ccy)) {\\n                uint256 depositAmount = Storage.slot().depositAmounts[_user][ccy];\\n                totalDepositAmount += AddressResolverLib.currencyController().convertToETH(\\n                    ccy,\\n                    depositAmount\\n                );\\n            }\\n        }\\n\\n        return totalDepositAmount;\\n    }\\n\\n    function _updateUsedCurrencies(address _user, bytes32 _ccy) internal {\\n        if (Storage.slot().depositAmounts[_user][_ccy] > 0) {\\n            Storage.slot().usedCurrencies[_user].add(_ccy);\\n        } else {\\n            Storage.slot().usedCurrencies[_user].remove(_ccy);\\n        }\\n    }\\n\\n    function _executeSwap(\\n        bytes32 _ccyFrom,\\n        bytes32 _ccyTo,\\n        uint256 _amountOut,\\n        uint256 _amountInMaximum,\\n        uint24 _poolFee\\n    ) internal returns (uint256) {\\n        ERC20Handler.safeApprove(\\n            Storage.slot().tokenAddresses[_ccyFrom],\\n            address(Params.uniswapRouter()),\\n            _amountInMaximum\\n        );\\n\\n        ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter.ExactOutputSingleParams({\\n            tokenIn: Storage.slot().tokenAddresses[_ccyFrom],\\n            tokenOut: Storage.slot().tokenAddresses[_ccyTo],\\n            fee: _poolFee,\\n            recipient: address(this),\\n            deadline: block.timestamp,\\n            amountOut: _amountOut,\\n            amountInMaximum: _amountInMaximum,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        return Params.uniswapRouter().exactOutputSingle(params);\\n    }\\n}\\n\",\"keccak256\":\"0x90f6ff01ecc93f3dbd983826a443e0bd76fe94362b825938863f6268f791d068\",\"license\":\"MIT\"},\"contracts/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AddressResolverLib} from \\\"../libraries/AddressResolverLib.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    modifier onlyAcceptedContracts() {\\n        require(isAcceptedContract(msg.sender), \\\"Only Accepted Contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    /**\\n     * @notice Returns contract names that can call this contract.\\n     * @dev The contact name listed in this method is also needed to be listed `requiredContracts` method.\\n     */\\n    function acceptedContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        require(address(Storage.slot().resolver) == address(0), \\\"resolver registered already\\\");\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function isAcceptedContract(address account) internal view virtual returns (bool) {\\n        bytes32[] memory contractNames = acceptedContracts();\\n        for (uint256 i = 0; i < contractNames.length; i++) {\\n            if (account == getAddress(contractNames[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        return AddressResolverLib.getAddress(name);\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return AddressResolverLib.beaconProxyController();\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return AddressResolverLib.currencyController();\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return AddressResolverLib.genesisValueVault();\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return AddressResolverLib.reserveFund();\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return AddressResolverLib.lendingMarketController();\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return AddressResolverLib.tokenVault();\\n    }\\n}\\n\",\"keccak256\":\"0x4d493d440938aff382d6d61c105a5c276697242390b0c1cab1627e646396df39\",\"license\":\"MIT\"},\"contracts/storages/CollateralParametersStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ISwapRouter} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport {IQuoter} from \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\n\\nlibrary CollateralParametersStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.collateralParameters\\\");\\n\\n    struct Storage {\\n        // Liquidation threshold rate (in basis point)\\n        uint256 liquidationThresholdRate;\\n        // Liquidation fee rate received by protocol (in basis point)\\n        uint256 liquidationProtocolFeeRate;\\n        // Liquidation fee rate received by liquidators (in basis point)\\n        uint256 liquidatorFeeRate;\\n        //  Uniswap router contract\\n        ISwapRouter uniswapRouter;\\n        //  Uniswap quoter contract\\n        IQuoter uniswapQuoter;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7cabba4652947d3dd17c78c9d972d9d65f4b9ca1297343074000bdca427070ac\",\"license\":\"MIT\"},\"contracts/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct Currency {\\n    bool isSupported;\\n    string name;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.currencyController\\\");\\n\\n    struct Storage {\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 => uint256) haircuts;\\n        // PriceFeed\\n        mapping(bytes32 => AggregatorV3Interface) usdPriceFeeds;\\n        mapping(bytes32 => AggregatorV3Interface) ethPriceFeeds;\\n        mapping(bytes32 => uint8) usdDecimals;\\n        mapping(bytes32 => uint8) ethDecimals;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x318293c6e7a2b9129e4c4e05a873c772e3a0cc4a92b40cc88749586f716c6643\",\"license\":\"MIT\"},\"contracts/storages/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary ERC20Storage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.erc20\\\");\\n\\n    struct Storage {\\n        address weth;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d84467eb850e5927870cb2551e5d0631854cef875f2d3ede75861b5eb738c7c\",\"license\":\"MIT\"},\"contracts/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.genesisValueVault\\\");\\n\\n    struct Storage {\\n        mapping(bytes32 => bool) isInitialized;\\n        mapping(bytes32 => uint256) initialCompoundFactors;\\n        mapping(bytes32 => uint256) lendingCompoundFactors;\\n        mapping(bytes32 => uint256) borrowingCompoundFactors;\\n        mapping(bytes32 => uint256) currentMaturity;\\n        mapping(bytes32 => uint8) decimals;\\n        // Mapping from user to balance per currency\\n        mapping(bytes32 => mapping(address => int256)) balances;\\n        mapping(bytes32 => uint256) totalLendingSupplies;\\n        mapping(bytes32 => uint256) totalBorrowingSupplies;\\n        // Mapping from maturity balance per currency\\n        mapping(bytes32 => mapping(uint256 => int256)) maturityBalances;\\n        // Mapping from maturity to auto-roll log per currency\\n        mapping(bytes32 => mapping(uint256 => AutoRollLog)) autoRollLogs;\\n        // Mapping from user to maturity per currency\\n        mapping(bytes32 => mapping(address => uint256)) userMaturities;\\n        // Mapping from maturity to maximum total supply per currency\\n        mapping(bytes32 => mapping(uint256 => uint256)) maximumTotalSupply;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa3bdb289513fa796d60fa49b83af011113a693377e1466ab4088cb5fd11a2917\",\"license\":\"MIT\"},\"contracts/storages/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.mixinAddressResolver\\\");\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 => address) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x852b885b6264a58930a0945c68842717e19f954eaefc0137235e6f263e17fa9d\",\"license\":\"MIT\"},\"contracts/storages/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.ownable\\\");\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef8bfa06947cdb63d47248ad074ac42a1b1ba828a2c97e42486a5dbb2c03e1d\",\"license\":\"MIT\"},\"contracts/storages/TokenVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary TokenVaultStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"sf.storage.tokenVault\\\");\\n\\n    struct Storage {\\n        // Currencies accepted as collateral\\n        EnumerableSet.Bytes32Set collateralCurrencies;\\n        // Mapping from currency name to token address\\n        mapping(bytes32 => address) tokenAddresses;\\n        // Mapping for used currency vaults per user.\\n        mapping(address => EnumerableSet.Bytes32Set) usedCurrencies;\\n        // Mapping from currency to total deposit amount\\n        mapping(bytes32 => uint256) totalDepositAmount;\\n        // Mapping for all deposits per users\\n        mapping(address => mapping(bytes32 => uint256)) depositAmounts;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbfc07559d1a3496d3f401ed5fef9d44cf64a0c412491066850a6fbf2b301e6a8\",\"license\":\"MIT\"},\"contracts/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    // Constant values\\n    uint256 public constant PRICE_DIGIT = 10000; // price digit in the basis (10000 -> 1)\\n    uint256 public constant PCT_DIGIT = 10000; // percentage digit in the basis (10000 -> 100%)\\n\\n    uint256 internal constant DAYS_IN_YEAR = 365;\\n    uint256 internal constant SECONDS_IN_MONTH = 2592000; // 60 * 60 * 24 * 30 * 12\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000; // 60 * 60 * 24 * 365\\n\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x59177cbe982f07c6668eb2af2d6fe112923bccdf6a851d7d0eeba9d4a1e87f8a\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../storages/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1c782b9deaf1f94d2af99826e6e8207f5e71f3fbb6ce18805913a3ca7dda9579\",\"license\":\"MIT\"},\"contracts/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0xe59cd60631c7c754ed6b77caa6f3a06301ef0df07881a3dcfa85124abc1890b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061370d806100206000396000f3fe6080604052600436106101fd5760003560e01c80635bffeb661161010d578063ab2a0777116100a0578063d5e190d01161006f578063d5e190d014610672578063e099765914610687578063f2fde38b1461069c578063fb7bd3b4146106bc578063fc700810146106dc57600080fd5b8063ab2a0777146105cf578063afe8efcf146105ef578063b12e44101461060f578063ca4230311461065257600080fd5b80638da5cb5b116100dc5780638da5cb5b146105675780638e19aff31461057c578063948060dd1461059c57806396994e37146105bc57600080fd5b80635bffeb66146104c95780635d861505146104e95780635d95df8a14610532578063715018a61461055257600080fd5b806329985e5a116101905780633f90a08e1161015f5780633f90a08e146103f05780634ba0c9b51461041d5780634c6aa99c1461043d57806354821c2114610489578063549687c2146104a957600080fd5b806329985e5a146103845780632af64bd31461039957806331ed1bcc146103ae5780633d03b9da146103ce57600080fd5b80630cfe33fa116101cc5780630cfe33fa146103115780631de26e161461033157806325e1f09f1461034457806328ff7a421461036457600080fd5b80630253cd7e14610261578063040cf0201461029457806304f3bcec146102b45780630cf7505d146102e157600080fd5b3661025c5761020a6106fc565b6001600160a01b0316336001600160a01b03161461025a5760405162461bcd60e51b815260206004820152600860248201526709cdee840ae8aa8960c31b60448201526064015b60405180910390fd5b005b600080fd5b34801561026d57600080fd5b5061028161027c366004612e3a565b61071d565b6040519081526020015b60405180910390f35b3480156102a057600080fd5b5061025a6102af366004612e66565b6107bb565b3480156102c057600080fd5b506102c96107f1565b6040516001600160a01b03909116815260200161028b565b3480156102ed57600080fd5b506103016102fc366004612e88565b610807565b604051901515815260200161028b565b34801561031d57600080fd5b5061028161032c366004612ea1565b610831565b61025a61033f366004612e66565b6108e8565b34801561035057600080fd5b5061030161035f366004612ea1565b610919565b34801561037057600080fd5b5061030161037f366004612ec5565b6109bc565b34801561039057600080fd5b5061025a610a83565b3480156103a557600080fd5b50610301610c30565b3480156103ba57600080fd5b5061025a6103c9366004612f13565b610d96565b3480156103da57600080fd5b506103e3610f3b565b60405161028b9190612fa1565b3480156103fc57600080fd5b5061041061040b366004612fe5565b610ffd565b60405161028b919061305a565b34801561042957600080fd5b5061025a610438366004613094565b6110ab565b34801561044957600080fd5b50610281610458366004612e88565b60009081527f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a831b602052604090205490565b34801561049557600080fd5b506102816104a4366004612ea1565b611167565b3480156104b557600080fd5b5061025a6104c43660046130c9565b6111fe565b3480156104d557600080fd5b5061025a6104e436600461312d565b611241565b3480156104f557600080fd5b506104fe6113dd565b604080519586526020860194909452928401919091526001600160a01b03908116606084015216608082015260a00161028b565b34801561053e57600080fd5b5061030161054d366004612e88565b61141e565b34801561055e57600080fd5b5061025a611438565b34801561057357600080fd5b506102c9611473565b34801561058857600080fd5b5061025a61059736600461316f565b61149b565b3480156105a857600080fd5b506102816105b7366004612ea1565b611565565b61025a6105ca366004613094565b6115f3565b3480156105db57600080fd5b506102816105ea36600461319f565b611623565b3480156105fb57600080fd5b5061028161060a366004612ea1565b6117e1565b34801561061b57600080fd5b506102c961062a366004612e88565b600090815260008051602061367883398151915260205260409020546001600160a01b031690565b34801561065e57600080fd5b5061028161066d366004612ea1565b6118b6565b34801561067e57600080fd5b506103e361198c565b34801561069357600080fd5b506103e36119aa565b3480156106a857600080fd5b5061025a6106b7366004612ea1565b611a26565b3480156106c857600080fd5b5061025a6106d7366004613094565b611ac6565b3480156106e857600080fd5b506103e36106f7366004612ea1565b611b4c565b60006000805160206136988339815191525b546001600160a01b0316919050565b604051630129e6bf60e11b81526001600160a01b03831660048201526024810182905260009073c43B86487A4F061fd9ABdecF5d40725fbD39188e90630253cd7e9060440160206040518083038186803b15801561077a57600080fd5b505af415801561078e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b29190613219565b90505b92915050565b816107c581610807565b6107e15760405162461bcd60e51b815260040161025190613232565b6107ec338484611bde565b505050565b600060008051602061365883398151915261070e565b600090815260008051602061367883398151915260205260409020546001600160a01b0316151590565b60405163654c629560e01b81526001600160a01b03821660048201526000908190819073c43B86487A4F061fd9ABdecF5d40725fbD39188e9063654c62959060240160606040518083038186803b15801561088b57600080fd5b505af415801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c39190613269565b50915091508082116108d65760006108e0565b6108e081836132ad565b949350505050565b816108f281610807565b61090e5760405162461bcd60e51b815260040161025190613232565b6107ec338484611d96565b60405163fd2117fb60e01b81526001600160a01b038216600482015260006024820181905260448201819052606482018190529073c43B86487A4F061fd9ABdecF5d40725fbD39188e9063fd2117fb9060840160206040518083038186803b15801561098457600080fd5b505af4158015610998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b591906132c4565b600073c43B86487A4F061fd9ABdecF5d40725fbD39188e63fd2117fb8686868660018111156109ed576109ed6132e1565b60405160e086901b6001600160e01b03191681526001600160a01b0394909416600485015260248401929092526044830152600114606482015260840160206040518083038186803b158015610a4257600080fd5b505af4158015610a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7a91906132c4565b95945050505050565b6000610a8d610f3b565b905060005b8151811015610c2c576000828281518110610aaf57610aaf6132f7565b602002602001015190506000610ad060008051602061365883398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610b4191869190605d01613365565b60206040518083038186803b158015610b5957600080fd5b505afa158015610b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b91919061337e565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610c249061339b565b915050610a92565b5050565b600080610c3b610f3b565b905060005b8151811015610d8d576000828281518110610c5d57610c5d6132f7565b60200260200101519050610c7c60008051602061365883398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020613658833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b158015610ce957600080fd5b505afa158015610cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d21919061337e565b6001600160a01b0316141580610d6b575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610d7a576000935050505090565b5080610d858161339b565b915050610c40565b50600191505090565b600054610100900460ff1615808015610db65750600054600160ff909116105b80610dd05750303b158015610dd0575060005460ff166001145b610e335760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610251565b6000805460ff191660011790558015610e56576000805461ff0019166101001790555b6000610e60611ef4565b6001600160a01b03161415610ec25760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b6064820152608401610251565b610ecb89611f1c565b610ed488611f8d565b610edd82612025565b610eea8787878787612096565b8015610f30576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b604080516003808252608082019092526060916020820183803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b81600081518110610f8657610f866132f7565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600181518110610fc057610fc06132f7565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b81600281518110610fee57610fee6132f7565b60200260200101818152505090565b60608167ffffffffffffffff811115611018576110186133b6565b604051908082528060200260200182016040528015611041578160200160208202803683370190505b50905060005b828110156110a457611070848483818110611064576110646132f7565b9050602002013561141e565b828281518110611082576110826132f7565b911515602092830291909101909101528061109c8161339b565b915050611047565b5092915050565b6110b43361249a565b6110d05760405162461bcd60e51b8152600401610251906133cc565b816110da81610807565b6110f65760405162461bcd60e51b815260040161025190613232565b604051634ba0c9b560e01b815273c43B86487A4F061fd9ABdecF5d40725fbD39188e90634ba0c9b59061113190879087908790600401613403565b60006040518083038186803b15801561114957600080fd5b505af415801561115d573d6000803e3d6000fd5b5050505050505050565b60405163654c629560e01b81526001600160a01b038216600482015260009073c43B86487A4F061fd9ABdecF5d40725fbD39188e9063654c62959060240160606040518083038186803b1580156111bd57600080fd5b505af41580156111d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f59190613269565b50909392505050565b33611207611473565b6001600160a01b03161461122d5760405162461bcd60e51b815260040161025190613424565b61123a8585858585612096565b5050505050565b3361124a611473565b6001600160a01b0316146112705760405162461bcd60e51b815260040161025190613424565b611278612514565b6001600160a01b0316631eae0893846040518263ffffffff1660e01b81526004016112a591815260200190565b60206040518083038186803b1580156112bd57600080fd5b505afa1580156112d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f591906132c4565b6113345760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642063757272656e637960801b6044820152606401610251565b60008381526000805160206136788339815191526020526040902080546001600160a01b0319166001600160a01b038416179055801561138a57611388836000805160206136b88339815191525b9061251e565b505b604080518481526001600160a01b0384166020820152821515918101919091527ff776c30df345d55df252bb5181a0c2bb23d601166606790a6f1b938d7e158503906060015b60405180910390a1505050565b60008060008060006113ed61252a565b94506113f761253a565b935061140161254d565b925061140b612560565b915061141561257c565b90509091929394565b60006107b56000805160206136b883398151915283612598565b33611441611473565b6001600160a01b0316146114675760405162461bcd60e51b815260040161025190613424565b6114716000611f1c565b565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa61070e565b336114a4611473565b6001600160a01b0316146114ca5760405162461bcd60e51b815260040161025190613424565b816114d481610807565b6114f05760405162461bcd60e51b815260040161025190613232565b81156115145761150e836000805160206136b8833981519152611382565b5061152e565b61152c6000805160206136b8833981519152846125b0565b505b6040805184815283151560208201527f97caf2b3b2f0aa460ca08b20c07f7a43ccf688e2f3b7179f2cf9113fb892bf8191016113d0565b60405163948060dd60e01b81526001600160a01b038216600482015260009073c43B86487A4F061fd9ABdecF5d40725fbD39188e9063948060dd9060240160206040518083038186803b1580156115bb57600080fd5b505af41580156115cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b59190613219565b6115fc3361249a565b6116185760405162461bcd60e51b8152600401610251906133cc565b6107ec838383611d96565b600061162e3361249a565b61164a5760405162461bcd60e51b8152600401610251906133cc565b6116538661141e565b61169f5760405162461bcd60e51b815260206004820152601c60248201527f4e6f74207265676973746572656420617320636f6c6c61746572616c000000006044820152606401610251565b60405163ab2a077760e01b81526001600160a01b03808a1660048301528816602482015260448101879052606481018690526084810185905262ffffff841660a482015260c481018390526000908190819073c43B86487A4F061fd9ABdecF5d40725fbD39188e9063ab2a07779060e40160806040518083038186803b15801561172857600080fd5b505af415801561173c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117609190613459565b929650909450925090506001600160a01b038a167fe388e4575608d6ee73a58c36e5ac2bbc5099054aa117945d3935653895ed8d3e8a8a866117a28a8a61348f565b6040805194855260208501939093529183015260608201526080810185905260a0810184905260c00160405180910390a2505050979650505050505050565b60405163654c629560e01b81526001600160a01b03821660048201526000908190819073c43B86487A4F061fd9ABdecF5d40725fbD39188e9063654c62959060240160606040518083038186803b15801561183b57600080fd5b505af415801561184f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118739190613269565b509150915061188061252a565b61188a90826134a7565b611896612710846134a7565b10156118ac576118a76002826134c6565b6108e0565b6000949350505050565b60405163654c629560e01b81526001600160a01b03821660048201526000908190819073c43B86487A4F061fd9ABdecF5d40725fbD39188e9063654c62959060240160606040518083038186803b15801561191057600080fd5b505af4158015611924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119489190613269565b5091509150816000141561196e57801561196457600019611967565b60005b9250611985565b8161197b612710836134a7565b6108e091906134c6565b5050919050565b60606119a56000805160206136b88339815191526125bc565b905090565b6040805160028082526060808301845292602083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b816000815181106119f8576119f86132f7565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b81600181518110610fee57610fee6132f7565b33611a2f611473565b6001600160a01b031614611a555760405162461bcd60e51b815260040161025190613424565b6001600160a01b038116611aba5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610251565b611ac381611f1c565b50565b611acf3361249a565b611aeb5760405162461bcd60e51b8152600401610251906133cc565b81611af581610807565b611b115760405162461bcd60e51b815260040161025190613232565b604051633edef4ed60e21b815273c43B86487A4F061fd9ABdecF5d40725fbD39188e9063fb7bd3b49061113190879087908790600401613403565b604051630fc7008160e41b81526001600160a01b038216600482015260609073c43B86487A4F061fd9ABdecF5d40725fbD39188e9063fc7008109060240160006040518083038186803b158015611ba257600080fd5b505af4158015611bb6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107b591908101906134e8565b60008111611bfe5760405162461bcd60e51b8152600401610251906135a6565b611c066125c7565b604051639519832b60e01b8152600481018490526001600160a01b0385811660248301529190911690639519832b90604401602060405180830381600087803b158015611c5257600080fd5b505af1158015611c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8a9190613219565b5060405163148b8b9d60e11b815260009073c43B86487A4F061fd9ABdecF5d40725fbD39188e90632917173a90611cc990879087908790600401613403565b60206040518083038186803b158015611ce157600080fd5b505af4158015611cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d199190613219565b60008481526000805160206136788339815191526020526040902054909150611d4c906001600160a01b031685836125d1565b60408051848152602081018390526001600160a01b038616917fc3ded2be7db21b1af963f267d27750e4a15f174547d88b886b9bda43e2c6fa32910160405180910390a250505050565b60008111611db65760405162461bcd60e51b8152600401610251906135a6565b611dbe6106fc565b600083815260008051602061367883398151915260205260409020546001600160a01b039081169116141580611df357503481145b611e0f5760405162461bcd60e51b8152600401610251906135a6565b60008281526000805160206136788339815191526020526040902054611e40906001600160a01b0316843084612609565b604051634ba0c9b560e01b815273c43B86487A4F061fd9ABdecF5d40725fbD39188e90634ba0c9b590611e7b90869086908690600401613403565b60006040518083038186803b158015611e9357600080fd5b505af4158015611ea7573d6000803e3d6000fd5b505060408051858152602081018590526001600160a01b03871693507f19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f92500160405180910390a2505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61070e565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080516020613658833981519152546001600160a01b031615611ff35760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c726561647900000000006044820152606401610251565b806000805160206136588339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b600080516020613698833981519152546001600160a01b0316156120815760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610251565b80600080516020613698833981519152612004565b600085116120f15760405162461bcd60e51b815260206004820152602260248201527f496e76616c6964206c69717569646174696f6e207468726573686f6c64207261604482015261746560f01b6064820152608401610251565b6127108411156121515760405162461bcd60e51b815260206004820152602560248201527f496e76616c6964206c69717569646174696f6e2070726f746f636f6c20666565604482015264207261746560d81b6064820152608401610251565b6127108311156121a35760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206c697175696461746f7220666565207261746500000000006044820152606401610251565b6001600160a01b0382166121f25760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2102ab734b9bbb0b8102937baba32b960511b6044820152606401610251565b6001600160a01b0381166122415760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2102ab734b9bbb0b81028bab7ba32b960511b6044820152606401610251565b61224961264d565b54851461229c577fd3353684d64f1c80498433d8407c96e6bbeb1ec88b6200ec97d2c910fdbd0da461227961264d565b5460408051918252602082018890520160405180910390a18461229a61264d565b555b6122a461264d565b600101548414612300577f651b17c8e9402610e6210cfaa5b252d2186f8a16adf58c9c0fd5793bc4ea9b1f6122d761264d565b6001015460408051918252602082018790520160405180910390a1836122fb61264d565b600101555b61230861264d565b600201548314612364578261231b61264d565b600201557f7e8f030f9238551b066874b952f0c6ba811ba426ab231ba4825421d5d8f5cd9561234861264d565b6002015460408051918252602082018690520160405180910390a15b61236c61264d565b600301546001600160a01b038381169116146123fc577fe7295f605b21e8c0803de3b127af76ce45d81732d075acf86e5959e923605bdc6123ab61264d565b60030154604080516001600160a01b03928316815291851660208301520160405180910390a1816123da61264d565b60030180546001600160a01b0319166001600160a01b03929092169190911790555b61240461264d565b600401546001600160a01b0382811691161461123a577fc3e7ec97cf382bb0aa286de53d3fbce580f260e5940bce703c49d62eb33ef4bc61244361264d565b60040154604080516001600160a01b03928316815291841660208301520160405180910390a18061247261264d565b60040180546001600160a01b0319166001600160a01b03929092169190911790555050505050565b6000806124a56119aa565b905060005b815181101561250a576124d58282815181106124c8576124c86132f7565b6020026020010151612671565b6001600160a01b0316846001600160a01b031614156124f8575060019392505050565b806125028161339b565b9150506124aa565b5060009392505050565b60006119a561267c565b60006107b2838361269c565b600061253461264d565b54919050565b600061254461264d565b60010154905090565b600061255761264d565b60020154905090565b600061256a61264d565b600301546001600160a01b0316919050565b600061258661264d565b600401546001600160a01b0316919050565b600081815260018301602052604081205415156107b2565b60006107b283836126eb565b60606107b5826127de565b60006119a561283a565b600080516020613698833981519152546001600160a01b03848116911614156125fe576107ec828261285f565b6107ec8383836129aa565b600080516020613698833981519152546001600160a01b038581169116141561263b576126368282612a8e565b612647565b61264784848484612bd7565b50505050565b7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d05290565b60006107b582612ccb565b60006119a57121bab93932b731bca1b7b73a3937b63632b960711b612ccb565b60008181526001830160205260408120546126e3575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107b5565b5060006107b5565b600081815260018301602052604081205480156127d457600061270f6001836132ad565b8554909150600090612723906001906132ad565b9050818114612788576000866000018281548110612743576127436132f7565b9060005260206000200154905080876000018481548110612766576127666132f7565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612799576127996135ce565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107b5565b60009150506107b5565b60608160000180548060200260200160405190810160405280929190818152602001828054801561282e57602002820191906000526020600020905b81548152602001906001019080831161281a575b50505050509050919050565b60006119a5762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b612ccb565b6000600080516020613698833981519152546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156128b157600080fd5b505afa1580156128c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e99190613219565b90508181101561292f5760405162461bcd60e51b8152602060048201526011602482015270092dce6eaccccd2c6d2cadce840ae8aa89607b1b6044820152606401610251565b80156107ec5760008051602061369883398151915254604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561298857600080fd5b505af115801561299c573d6000803e3d6000fd5b505050506107ec8383612d5c565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691612a0691906135e4565b6000604051808303816000865af19150503d8060008114612a43576040519150601f19603f3d011682016040523d82523d6000602084013e612a48565b606091505b5091509150818015612a72575080511580612a72575080806020019051810190612a7291906132c4565b61123a5760405162461bcd60e51b815260040161025190613600565b80471015612ad15760405162461bcd60e51b815260206004820152601060248201526f092dce6eaccccd2c6d2cadce8408aa8960831b6044820152606401610251565b6000805160206136988339815191525460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0918491600480830192600092919082900301818588803b158015612b2557600080fd5b505af1158015612b39573d6000803e3d6000fd5b5050505050612b5360008051602061369883398151915290565b5460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015612b9f57600080fd5b505af1158015612bb3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec91906132c4565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691612c3b91906135e4565b6000604051808303816000865af19150503d8060008114612c78576040519150601f19603f3d011682016040523d82523d6000602084013e612c7d565b606091505b5091509150818015612ca7575080511580612ca7575080806020019051810190612ca791906132c4565b612cc35760405162461bcd60e51b815260040161025190613600565b505050505050565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b031690816110a45760405162461bcd60e51b81526004016102519190613644565b604080516000808252602082019092526001600160a01b038416908390604051612d8691906135e4565b60006040518083038185875af1925050503d8060008114612dc3576040519150601f19603f3d011682016040523d82523d6000602084013e612dc8565b606091505b50509050806107ec5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b6064820152608401610251565b6001600160a01b0381168114611ac357600080fd5b60008060408385031215612e4d57600080fd5b8235612e5881612e25565b946020939093013593505050565b60008060408385031215612e7957600080fd5b50508035926020909101359150565b600060208284031215612e9a57600080fd5b5035919050565b600060208284031215612eb357600080fd5b8135612ebe81612e25565b9392505050565b60008060008060808587031215612edb57600080fd5b8435612ee681612e25565b93506020850135925060408501359150606085013560028110612f0857600080fd5b939692955090935050565b600080600080600080600080610100898b031215612f3057600080fd5b8835612f3b81612e25565b97506020890135612f4b81612e25565b965060408901359550606089013594506080890135935060a0890135612f7081612e25565b925060c0890135612f8081612e25565b915060e0890135612f9081612e25565b809150509295985092959890939650565b6020808252825182820181905260009190848201906040850190845b81811015612fd957835183529284019291840191600101612fbd565b50909695505050505050565b60008060208385031215612ff857600080fd5b823567ffffffffffffffff8082111561301057600080fd5b818501915085601f83011261302457600080fd5b81358181111561303357600080fd5b8660208260051b850101111561304857600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015612fd9578351151583529284019291840191600101613076565b6000806000606084860312156130a957600080fd5b83356130b481612e25565b95602085013595506040909401359392505050565b600080600080600060a086880312156130e157600080fd5b853594506020860135935060408601359250606086013561310181612e25565b9150608086013561311181612e25565b809150509295509295909350565b8015158114611ac357600080fd5b60008060006060848603121561314257600080fd5b83359250602084013561315481612e25565b915060408401356131648161311f565b809150509250925092565b6000806040838503121561318257600080fd5b8235915060208301356131948161311f565b809150509250929050565b600080600080600080600060e0888a0312156131ba57600080fd5b87356131c581612e25565b965060208801356131d581612e25565b955060408801359450606088013593506080880135925060a088013562ffffff8116811461320257600080fd5b8092505060c0880135905092959891949750929550565b60006020828403121561322b57600080fd5b5051919050565b60208082526017908201527f43757272656e6379206e6f742072656769737465726564000000000000000000604082015260600190565b60008060006060848603121561327e57600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052601160045260246000fd5b6000828210156132bf576132bf613297565b500390565b6000602082840312156132d657600080fd5b8151612ebe8161311f565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60005b83811015613328578181015183820152602001613310565b838111156126475750506000910152565b6000815180845261335181602086016020860161330d565b601f01601f19169290920160200192915050565b8281526040602082015260006108e06040830184613339565b60006020828403121561339057600080fd5b8151612ebe81612e25565b60006000198214156133af576133af613297565b5060010190565b634e487b7160e01b600052604160045260246000fd5b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000806000806080858703121561346f57600080fd5b505082516020840151604085015160609095015191969095509092509050565b600082198211156134a2576134a2613297565b500190565b60008160001904831182151516156134c1576134c1613297565b500290565b6000826134e357634e487b7160e01b600052601260045260246000fd5b500490565b600060208083850312156134fb57600080fd5b825167ffffffffffffffff8082111561351357600080fd5b818501915085601f83011261352757600080fd5b815181811115613539576135396133b6565b8060051b604051601f19603f8301168101818110858211171561355e5761355e6133b6565b60405291825284820192508381018501918883111561357c57600080fd5b938501935b8285101561359a57845184529385019392850192613581565b98975050505050505050565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b634e487b7160e01b600052603160045260246000fd5b600082516135f681846020870161330d565b9190910192915050565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b6020815260006107b2602083018461333956fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401853832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a83197522ee63bb7da831844dcdb60f35e8cfa51225eeb4ed6734e421ed06f0d5680553832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a8317a26469706673582212206af30bf7a7d327105a28f16add502a791088e14da98105bc5d885caa2a17993f64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101fd5760003560e01c80635bffeb661161010d578063ab2a0777116100a0578063d5e190d01161006f578063d5e190d014610672578063e099765914610687578063f2fde38b1461069c578063fb7bd3b4146106bc578063fc700810146106dc57600080fd5b8063ab2a0777146105cf578063afe8efcf146105ef578063b12e44101461060f578063ca4230311461065257600080fd5b80638da5cb5b116100dc5780638da5cb5b146105675780638e19aff31461057c578063948060dd1461059c57806396994e37146105bc57600080fd5b80635bffeb66146104c95780635d861505146104e95780635d95df8a14610532578063715018a61461055257600080fd5b806329985e5a116101905780633f90a08e1161015f5780633f90a08e146103f05780634ba0c9b51461041d5780634c6aa99c1461043d57806354821c2114610489578063549687c2146104a957600080fd5b806329985e5a146103845780632af64bd31461039957806331ed1bcc146103ae5780633d03b9da146103ce57600080fd5b80630cfe33fa116101cc5780630cfe33fa146103115780631de26e161461033157806325e1f09f1461034457806328ff7a421461036457600080fd5b80630253cd7e14610261578063040cf0201461029457806304f3bcec146102b45780630cf7505d146102e157600080fd5b3661025c5761020a6106fc565b6001600160a01b0316336001600160a01b03161461025a5760405162461bcd60e51b815260206004820152600860248201526709cdee840ae8aa8960c31b60448201526064015b60405180910390fd5b005b600080fd5b34801561026d57600080fd5b5061028161027c366004612e3a565b61071d565b6040519081526020015b60405180910390f35b3480156102a057600080fd5b5061025a6102af366004612e66565b6107bb565b3480156102c057600080fd5b506102c96107f1565b6040516001600160a01b03909116815260200161028b565b3480156102ed57600080fd5b506103016102fc366004612e88565b610807565b604051901515815260200161028b565b34801561031d57600080fd5b5061028161032c366004612ea1565b610831565b61025a61033f366004612e66565b6108e8565b34801561035057600080fd5b5061030161035f366004612ea1565b610919565b34801561037057600080fd5b5061030161037f366004612ec5565b6109bc565b34801561039057600080fd5b5061025a610a83565b3480156103a557600080fd5b50610301610c30565b3480156103ba57600080fd5b5061025a6103c9366004612f13565b610d96565b3480156103da57600080fd5b506103e3610f3b565b60405161028b9190612fa1565b3480156103fc57600080fd5b5061041061040b366004612fe5565b610ffd565b60405161028b919061305a565b34801561042957600080fd5b5061025a610438366004613094565b6110ab565b34801561044957600080fd5b50610281610458366004612e88565b60009081527f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a831b602052604090205490565b34801561049557600080fd5b506102816104a4366004612ea1565b611167565b3480156104b557600080fd5b5061025a6104c43660046130c9565b6111fe565b3480156104d557600080fd5b5061025a6104e436600461312d565b611241565b3480156104f557600080fd5b506104fe6113dd565b604080519586526020860194909452928401919091526001600160a01b03908116606084015216608082015260a00161028b565b34801561053e57600080fd5b5061030161054d366004612e88565b61141e565b34801561055e57600080fd5b5061025a611438565b34801561057357600080fd5b506102c9611473565b34801561058857600080fd5b5061025a61059736600461316f565b61149b565b3480156105a857600080fd5b506102816105b7366004612ea1565b611565565b61025a6105ca366004613094565b6115f3565b3480156105db57600080fd5b506102816105ea36600461319f565b611623565b3480156105fb57600080fd5b5061028161060a366004612ea1565b6117e1565b34801561061b57600080fd5b506102c961062a366004612e88565b600090815260008051602061367883398151915260205260409020546001600160a01b031690565b34801561065e57600080fd5b5061028161066d366004612ea1565b6118b6565b34801561067e57600080fd5b506103e361198c565b34801561069357600080fd5b506103e36119aa565b3480156106a857600080fd5b5061025a6106b7366004612ea1565b611a26565b3480156106c857600080fd5b5061025a6106d7366004613094565b611ac6565b3480156106e857600080fd5b506103e36106f7366004612ea1565b611b4c565b60006000805160206136988339815191525b546001600160a01b0316919050565b604051630129e6bf60e11b81526001600160a01b03831660048201526024810182905260009073__$09c51783f1a1597899ee0a3142cec7935a$__90630253cd7e9060440160206040518083038186803b15801561077a57600080fd5b505af415801561078e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b29190613219565b90505b92915050565b816107c581610807565b6107e15760405162461bcd60e51b815260040161025190613232565b6107ec338484611bde565b505050565b600060008051602061365883398151915261070e565b600090815260008051602061367883398151915260205260409020546001600160a01b0316151590565b60405163654c629560e01b81526001600160a01b03821660048201526000908190819073__$09c51783f1a1597899ee0a3142cec7935a$__9063654c62959060240160606040518083038186803b15801561088b57600080fd5b505af415801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c39190613269565b50915091508082116108d65760006108e0565b6108e081836132ad565b949350505050565b816108f281610807565b61090e5760405162461bcd60e51b815260040161025190613232565b6107ec338484611d96565b60405163fd2117fb60e01b81526001600160a01b038216600482015260006024820181905260448201819052606482018190529073__$09c51783f1a1597899ee0a3142cec7935a$__9063fd2117fb9060840160206040518083038186803b15801561098457600080fd5b505af4158015610998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b591906132c4565b600073__$09c51783f1a1597899ee0a3142cec7935a$__63fd2117fb8686868660018111156109ed576109ed6132e1565b60405160e086901b6001600160e01b03191681526001600160a01b0394909416600485015260248401929092526044830152600114606482015260840160206040518083038186803b158015610a4257600080fd5b505af4158015610a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7a91906132c4565b95945050505050565b6000610a8d610f3b565b905060005b8151811015610c2c576000828281518110610aaf57610aaf6132f7565b602002602001015190506000610ad060008051602061365883398151915290565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd91610b4191869190605d01613365565b60206040518083038186803b158015610b5957600080fd5b505afa158015610b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b91919061337e565b60008381527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124019602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915582518681529182015281519293507f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68929081900390910190a150508080610c249061339b565b915050610a92565b5050565b600080610c3b610f3b565b905060005b8151811015610d8d576000828281518110610c5d57610c5d6132f7565b60200260200101519050610c7c60008051602061365883398151915290565b600082815260019190910160205260409020546001600160a01b0316600080516020613658833981519152546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a7219060240160206040518083038186803b158015610ce957600080fd5b505afa158015610cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d21919061337e565b6001600160a01b0316141580610d6b575060008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401960205260409020546001600160a01b0316155b15610d7a576000935050505090565b5080610d858161339b565b915050610c40565b50600191505090565b600054610100900460ff1615808015610db65750600054600160ff909116105b80610dd05750303b158015610dd0575060005460ff166001145b610e335760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610251565b6000805460ff191660011790558015610e56576000805461ff0019166101001790555b6000610e60611ef4565b6001600160a01b03161415610ec25760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b6064820152608401610251565b610ecb89611f1c565b610ed488611f8d565b610edd82612025565b610eea8787878787612096565b8015610f30576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b604080516003808252608082019092526060916020820183803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b81600081518110610f8657610f866132f7565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b81600181518110610fc057610fc06132f7565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b81600281518110610fee57610fee6132f7565b60200260200101818152505090565b60608167ffffffffffffffff811115611018576110186133b6565b604051908082528060200260200182016040528015611041578160200160208202803683370190505b50905060005b828110156110a457611070848483818110611064576110646132f7565b9050602002013561141e565b828281518110611082576110826132f7565b911515602092830291909101909101528061109c8161339b565b915050611047565b5092915050565b6110b43361249a565b6110d05760405162461bcd60e51b8152600401610251906133cc565b816110da81610807565b6110f65760405162461bcd60e51b815260040161025190613232565b604051634ba0c9b560e01b815273__$09c51783f1a1597899ee0a3142cec7935a$__90634ba0c9b59061113190879087908790600401613403565b60006040518083038186803b15801561114957600080fd5b505af415801561115d573d6000803e3d6000fd5b5050505050505050565b60405163654c629560e01b81526001600160a01b038216600482015260009073__$09c51783f1a1597899ee0a3142cec7935a$__9063654c62959060240160606040518083038186803b1580156111bd57600080fd5b505af41580156111d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f59190613269565b50909392505050565b33611207611473565b6001600160a01b03161461122d5760405162461bcd60e51b815260040161025190613424565b61123a8585858585612096565b5050505050565b3361124a611473565b6001600160a01b0316146112705760405162461bcd60e51b815260040161025190613424565b611278612514565b6001600160a01b0316631eae0893846040518263ffffffff1660e01b81526004016112a591815260200190565b60206040518083038186803b1580156112bd57600080fd5b505afa1580156112d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f591906132c4565b6113345760405162461bcd60e51b815260206004820152601060248201526f496e76616c69642063757272656e637960801b6044820152606401610251565b60008381526000805160206136788339815191526020526040902080546001600160a01b0319166001600160a01b038416179055801561138a57611388836000805160206136b88339815191525b9061251e565b505b604080518481526001600160a01b0384166020820152821515918101919091527ff776c30df345d55df252bb5181a0c2bb23d601166606790a6f1b938d7e158503906060015b60405180910390a1505050565b60008060008060006113ed61252a565b94506113f761253a565b935061140161254d565b925061140b612560565b915061141561257c565b90509091929394565b60006107b56000805160206136b883398151915283612598565b33611441611473565b6001600160a01b0316146114675760405162461bcd60e51b815260040161025190613424565b6114716000611f1c565b565b60007f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa61070e565b336114a4611473565b6001600160a01b0316146114ca5760405162461bcd60e51b815260040161025190613424565b816114d481610807565b6114f05760405162461bcd60e51b815260040161025190613232565b81156115145761150e836000805160206136b8833981519152611382565b5061152e565b61152c6000805160206136b8833981519152846125b0565b505b6040805184815283151560208201527f97caf2b3b2f0aa460ca08b20c07f7a43ccf688e2f3b7179f2cf9113fb892bf8191016113d0565b60405163948060dd60e01b81526001600160a01b038216600482015260009073__$09c51783f1a1597899ee0a3142cec7935a$__9063948060dd9060240160206040518083038186803b1580156115bb57600080fd5b505af41580156115cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b59190613219565b6115fc3361249a565b6116185760405162461bcd60e51b8152600401610251906133cc565b6107ec838383611d96565b600061162e3361249a565b61164a5760405162461bcd60e51b8152600401610251906133cc565b6116538661141e565b61169f5760405162461bcd60e51b815260206004820152601c60248201527f4e6f74207265676973746572656420617320636f6c6c61746572616c000000006044820152606401610251565b60405163ab2a077760e01b81526001600160a01b03808a1660048301528816602482015260448101879052606481018690526084810185905262ffffff841660a482015260c481018390526000908190819073__$09c51783f1a1597899ee0a3142cec7935a$__9063ab2a07779060e40160806040518083038186803b15801561172857600080fd5b505af415801561173c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117609190613459565b929650909450925090506001600160a01b038a167fe388e4575608d6ee73a58c36e5ac2bbc5099054aa117945d3935653895ed8d3e8a8a866117a28a8a61348f565b6040805194855260208501939093529183015260608201526080810185905260a0810184905260c00160405180910390a2505050979650505050505050565b60405163654c629560e01b81526001600160a01b03821660048201526000908190819073__$09c51783f1a1597899ee0a3142cec7935a$__9063654c62959060240160606040518083038186803b15801561183b57600080fd5b505af415801561184f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118739190613269565b509150915061188061252a565b61188a90826134a7565b611896612710846134a7565b10156118ac576118a76002826134c6565b6108e0565b6000949350505050565b60405163654c629560e01b81526001600160a01b03821660048201526000908190819073__$09c51783f1a1597899ee0a3142cec7935a$__9063654c62959060240160606040518083038186803b15801561191057600080fd5b505af4158015611924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119489190613269565b5091509150816000141561196e57801561196457600019611967565b60005b9250611985565b8161197b612710836134a7565b6108e091906134c6565b5050919050565b60606119a56000805160206136b88339815191526125bc565b905090565b6040805160028082526060808301845292602083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b816000815181106119f8576119f86132f7565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b81600181518110610fee57610fee6132f7565b33611a2f611473565b6001600160a01b031614611a555760405162461bcd60e51b815260040161025190613424565b6001600160a01b038116611aba5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610251565b611ac381611f1c565b50565b611acf3361249a565b611aeb5760405162461bcd60e51b8152600401610251906133cc565b81611af581610807565b611b115760405162461bcd60e51b815260040161025190613232565b604051633edef4ed60e21b815273__$09c51783f1a1597899ee0a3142cec7935a$__9063fb7bd3b49061113190879087908790600401613403565b604051630fc7008160e41b81526001600160a01b038216600482015260609073__$09c51783f1a1597899ee0a3142cec7935a$__9063fc7008109060240160006040518083038186803b158015611ba257600080fd5b505af4158015611bb6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107b591908101906134e8565b60008111611bfe5760405162461bcd60e51b8152600401610251906135a6565b611c066125c7565b604051639519832b60e01b8152600481018490526001600160a01b0385811660248301529190911690639519832b90604401602060405180830381600087803b158015611c5257600080fd5b505af1158015611c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8a9190613219565b5060405163148b8b9d60e11b815260009073__$09c51783f1a1597899ee0a3142cec7935a$__90632917173a90611cc990879087908790600401613403565b60206040518083038186803b158015611ce157600080fd5b505af4158015611cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d199190613219565b60008481526000805160206136788339815191526020526040902054909150611d4c906001600160a01b031685836125d1565b60408051848152602081018390526001600160a01b038616917fc3ded2be7db21b1af963f267d27750e4a15f174547d88b886b9bda43e2c6fa32910160405180910390a250505050565b60008111611db65760405162461bcd60e51b8152600401610251906135a6565b611dbe6106fc565b600083815260008051602061367883398151915260205260409020546001600160a01b039081169116141580611df357503481145b611e0f5760405162461bcd60e51b8152600401610251906135a6565b60008281526000805160206136788339815191526020526040902054611e40906001600160a01b0316843084612609565b604051634ba0c9b560e01b815273__$09c51783f1a1597899ee0a3142cec7935a$__90634ba0c9b590611e7b90869086908690600401613403565b60006040518083038186803b158015611e9357600080fd5b505af4158015611ea7573d6000803e3d6000fd5b505060408051858152602081018590526001600160a01b03871693507f19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f92500160405180910390a2505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61070e565b7f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080516020613658833981519152546001600160a01b031615611ff35760405162461bcd60e51b815260206004820152601b60248201527f7265736f6c766572207265676973746572656420616c726561647900000000006044820152606401610251565b806000805160206136588339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b600080516020613698833981519152546001600160a01b0316156120815760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610251565b80600080516020613698833981519152612004565b600085116120f15760405162461bcd60e51b815260206004820152602260248201527f496e76616c6964206c69717569646174696f6e207468726573686f6c64207261604482015261746560f01b6064820152608401610251565b6127108411156121515760405162461bcd60e51b815260206004820152602560248201527f496e76616c6964206c69717569646174696f6e2070726f746f636f6c20666565604482015264207261746560d81b6064820152608401610251565b6127108311156121a35760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206c697175696461746f7220666565207261746500000000006044820152606401610251565b6001600160a01b0382166121f25760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2102ab734b9bbb0b8102937baba32b960511b6044820152606401610251565b6001600160a01b0381166122415760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2102ab734b9bbb0b81028bab7ba32b960511b6044820152606401610251565b61224961264d565b54851461229c577fd3353684d64f1c80498433d8407c96e6bbeb1ec88b6200ec97d2c910fdbd0da461227961264d565b5460408051918252602082018890520160405180910390a18461229a61264d565b555b6122a461264d565b600101548414612300577f651b17c8e9402610e6210cfaa5b252d2186f8a16adf58c9c0fd5793bc4ea9b1f6122d761264d565b6001015460408051918252602082018790520160405180910390a1836122fb61264d565b600101555b61230861264d565b600201548314612364578261231b61264d565b600201557f7e8f030f9238551b066874b952f0c6ba811ba426ab231ba4825421d5d8f5cd9561234861264d565b6002015460408051918252602082018690520160405180910390a15b61236c61264d565b600301546001600160a01b038381169116146123fc577fe7295f605b21e8c0803de3b127af76ce45d81732d075acf86e5959e923605bdc6123ab61264d565b60030154604080516001600160a01b03928316815291851660208301520160405180910390a1816123da61264d565b60030180546001600160a01b0319166001600160a01b03929092169190911790555b61240461264d565b600401546001600160a01b0382811691161461123a577fc3e7ec97cf382bb0aa286de53d3fbce580f260e5940bce703c49d62eb33ef4bc61244361264d565b60040154604080516001600160a01b03928316815291841660208301520160405180910390a18061247261264d565b60040180546001600160a01b0319166001600160a01b03929092169190911790555050505050565b6000806124a56119aa565b905060005b815181101561250a576124d58282815181106124c8576124c86132f7565b6020026020010151612671565b6001600160a01b0316846001600160a01b031614156124f8575060019392505050565b806125028161339b565b9150506124aa565b5060009392505050565b60006119a561267c565b60006107b2838361269c565b600061253461264d565b54919050565b600061254461264d565b60010154905090565b600061255761264d565b60020154905090565b600061256a61264d565b600301546001600160a01b0316919050565b600061258661264d565b600401546001600160a01b0316919050565b600081815260018301602052604081205415156107b2565b60006107b283836126eb565b60606107b5826127de565b60006119a561283a565b600080516020613698833981519152546001600160a01b03848116911614156125fe576107ec828261285f565b6107ec8383836129aa565b600080516020613698833981519152546001600160a01b038581169116141561263b576126368282612a8e565b612647565b61264784848484612bd7565b50505050565b7f1aaabb4945989eb9ee8150fddc35fcfc125664a7b898aa2de5931bb12484d05290565b60006107b582612ccb565b60006119a57121bab93932b731bca1b7b73a3937b63632b960711b612ccb565b60008181526001830160205260408120546126e3575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107b5565b5060006107b5565b600081815260018301602052604081205480156127d457600061270f6001836132ad565b8554909150600090612723906001906132ad565b9050818114612788576000866000018281548110612743576127436132f7565b9060005260206000200154905080876000018481548110612766576127666132f7565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612799576127996135ce565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107b5565b60009150506107b5565b60608160000180548060200260200160405190810160405280929190818152602001828054801561282e57602002820191906000526020600020905b81548152602001906001019080831161281a575b50505050509050919050565b60006119a5762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b612ccb565b6000600080516020613698833981519152546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156128b157600080fd5b505afa1580156128c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e99190613219565b90508181101561292f5760405162461bcd60e51b8152602060048201526011602482015270092dce6eaccccd2c6d2cadce840ae8aa89607b1b6044820152606401610251565b80156107ec5760008051602061369883398151915254604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561298857600080fd5b505af115801561299c573d6000803e3d6000fd5b505050506107ec8383612d5c565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691612a0691906135e4565b6000604051808303816000865af19150503d8060008114612a43576040519150601f19603f3d011682016040523d82523d6000602084013e612a48565b606091505b5091509150818015612a72575080511580612a72575080806020019051810190612a7291906132c4565b61123a5760405162461bcd60e51b815260040161025190613600565b80471015612ad15760405162461bcd60e51b815260206004820152601060248201526f092dce6eaccccd2c6d2cadce8408aa8960831b6044820152606401610251565b6000805160206136988339815191525460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0918491600480830192600092919082900301818588803b158015612b2557600080fd5b505af1158015612b39573d6000803e3d6000fd5b5050505050612b5360008051602061369883398151915290565b5460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015612b9f57600080fd5b505af1158015612bb3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec91906132c4565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691612c3b91906135e4565b6000604051808303816000865af19150503d8060008114612c78576040519150601f19603f3d011682016040523d82523d6000602084013e612c7d565b606091505b5091509150818015612ca7575080511580612ca7575080806020019051810190612ca791906132c4565b612cc35760405162461bcd60e51b815260040161025190613600565b505050505050565b60008181527f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240196020908152604080832054815170026b4b9b9b4b7339030b2323932b9b99d1607d1b9381019390935260318084018690528251808503909101815260519093019091526001600160a01b031690816110a45760405162461bcd60e51b81526004016102519190613644565b604080516000808252602082019092526001600160a01b038416908390604051612d8691906135e4565b60006040518083038185875af1925050503d8060008114612dc3576040519150601f19603f3d011682016040523d82523d6000602084013e612dc8565b606091505b50509050806107ec5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b6064820152608401610251565b6001600160a01b0381168114611ac357600080fd5b60008060408385031215612e4d57600080fd5b8235612e5881612e25565b946020939093013593505050565b60008060408385031215612e7957600080fd5b50508035926020909101359150565b600060208284031215612e9a57600080fd5b5035919050565b600060208284031215612eb357600080fd5b8135612ebe81612e25565b9392505050565b60008060008060808587031215612edb57600080fd5b8435612ee681612e25565b93506020850135925060408501359150606085013560028110612f0857600080fd5b939692955090935050565b600080600080600080600080610100898b031215612f3057600080fd5b8835612f3b81612e25565b97506020890135612f4b81612e25565b965060408901359550606089013594506080890135935060a0890135612f7081612e25565b925060c0890135612f8081612e25565b915060e0890135612f9081612e25565b809150509295985092959890939650565b6020808252825182820181905260009190848201906040850190845b81811015612fd957835183529284019291840191600101612fbd565b50909695505050505050565b60008060208385031215612ff857600080fd5b823567ffffffffffffffff8082111561301057600080fd5b818501915085601f83011261302457600080fd5b81358181111561303357600080fd5b8660208260051b850101111561304857600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015612fd9578351151583529284019291840191600101613076565b6000806000606084860312156130a957600080fd5b83356130b481612e25565b95602085013595506040909401359392505050565b600080600080600060a086880312156130e157600080fd5b853594506020860135935060408601359250606086013561310181612e25565b9150608086013561311181612e25565b809150509295509295909350565b8015158114611ac357600080fd5b60008060006060848603121561314257600080fd5b83359250602084013561315481612e25565b915060408401356131648161311f565b809150509250925092565b6000806040838503121561318257600080fd5b8235915060208301356131948161311f565b809150509250929050565b600080600080600080600060e0888a0312156131ba57600080fd5b87356131c581612e25565b965060208801356131d581612e25565b955060408801359450606088013593506080880135925060a088013562ffffff8116811461320257600080fd5b8092505060c0880135905092959891949750929550565b60006020828403121561322b57600080fd5b5051919050565b60208082526017908201527f43757272656e6379206e6f742072656769737465726564000000000000000000604082015260600190565b60008060006060848603121561327e57600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052601160045260246000fd5b6000828210156132bf576132bf613297565b500390565b6000602082840312156132d657600080fd5b8151612ebe8161311f565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60005b83811015613328578181015183820152602001613310565b838111156126475750506000910152565b6000815180845261335181602086016020860161330d565b601f01601f19169290920160200192915050565b8281526040602082015260006108e06040830184613339565b60006020828403121561339057600080fd5b8151612ebe81612e25565b60006000198214156133af576133af613297565b5060010190565b634e487b7160e01b600052604160045260246000fd5b60208082526017908201527f4f6e6c7920416363657074656420436f6e747261637473000000000000000000604082015260600190565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000806000806080858703121561346f57600080fd5b505082516020840151604085015160609095015191969095509092509050565b600082198211156134a2576134a2613297565b500190565b60008160001904831182151516156134c1576134c1613297565b500290565b6000826134e357634e487b7160e01b600052601260045260246000fd5b500490565b600060208083850312156134fb57600080fd5b825167ffffffffffffffff8082111561351357600080fd5b818501915085601f83011261352757600080fd5b815181811115613539576135396133b6565b8060051b604051601f19603f8301168101818110858211171561355e5761355e6133b6565b60405291825284820192508381018501918883111561357c57600080fd5b938501935b8285101561359a57845184529385019392850192613581565b98975050505050505050565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b634e487b7160e01b600052603160045260246000fd5b600082516135f681846020870161330d565b9190910192915050565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b6020815260006107b2602083018461333956fe4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e412401853832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a83197522ee63bb7da831844dcdb60f35e8cfa51225eeb4ed6734e421ed06f0d5680553832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a8317a26469706673582212206af30bf7a7d327105a28f16add502a791088e14da98105bc5d885caa2a17993f64736f6c63430008090033",
  "libraries": {
    "DepositManagementLogic": "0xc43B86487A4F061fd9ABdecF5d40725fbD39188e"
  },
  "implementation": "0x41bd8e3F18229F38d52B5ED3B6BFdc3Bc1b367Bf",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptedContracts()": {
        "details": "The contact name listed in this method is also needed to be listed `requiredContracts` method."
      },
      "addDepositAmount(address,bytes32,uint256)": {
        "details": "Adds deposit amount.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "deposit(bytes32,uint256)": {
        "details": "Deposits funds by the caller into collateral.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32"
        }
      },
      "depositFrom(address,bytes32,uint256)": {
        "details": "Deposits funds by the `from` into collateral.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32",
          "_from": "user's address"
        }
      },
      "getCollateralCurrencies()": {
        "returns": {
          "_0": "Array of the currency accepted as collateral"
        }
      },
      "getCollateralParameters()": {
        "returns": {
          "liquidationProtocolFeeRate": "Liquidation fee rate received by protocol",
          "liquidationThresholdRate": "Auto liquidation threshold rate",
          "liquidatorFeeRate": "Liquidation fee rate received by liquidators",
          "uniswapQuoter": "Uniswap quoter contract address",
          "uniswapRouter": "Uniswap router contract address"
        }
      },
      "getCoverage(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "coverage": "The rate of collateral used"
        }
      },
      "getDepositAmount(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The deposited amount"
        }
      },
      "getLiquidationAmount(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "liquidationAmount": "The the amount to be liquidated"
        }
      },
      "getTokenAddress(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The token contract address"
        }
      },
      "getTotalCollateralAmount(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "totalCollateralAmount": "The total collateral amount in ETH"
        }
      },
      "getTotalDepositAmount(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The total deposited amount"
        }
      },
      "getUnusedCollateral(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The total amount of unused collateral"
        }
      },
      "getUsedCurrencies(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The currency names in bytes32"
        }
      },
      "getWithdrawableCollateral(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "Maximum amount of ETH that can be withdrawn"
        }
      },
      "initialize(address,address,uint256,uint256,uint256,address,address,address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_WETH9": "The address of WETH",
          "_liquidationProtocolFeeRate": "The liquidation fee rate received by protocol",
          "_liquidationThresholdRate": "The liquidation threshold rate",
          "_liquidatorFeeRate": "The liquidation fee rate received by liquidators",
          "_owner": "The address of the contract owner",
          "_resolver": "The address of the Address Resolver contract",
          "_uniswapQuoter": "Uniswap quoter contract address",
          "_uniswapRouter": "Uniswap router contract address"
        }
      },
      "isCollateral(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The boolean if the currency has been registered or not"
        }
      },
      "isCollateral(bytes32[])": {
        "params": {
          "_ccys": "Currency name list in bytes32"
        },
        "returns": {
          "isCollateralCurrencies": "Array of the boolean if the currency has been registered or not"
        }
      },
      "isCovered(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The boolean if the collateral has sufficient coverage or not"
        }
      },
      "isCovered(address,bytes32,uint256,uint8)": {
        "params": {
          "_unsettledOrderAmount": "Additional unsettled order amount",
          "_unsettledOrderCcy": "Additional unsettled order currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The boolean if the collateral has sufficient coverage or not"
        }
      },
      "isRegisteredCurrency(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The boolean if the currency has been registered or not"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerCurrency(bytes32,address,bool)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_isCollateral": "Boolean if the selected currency is acceptable as collateral.",
          "_tokenAddress": "Token contract address of the selected currency"
        }
      },
      "removeDepositAmount(address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to withdraw.",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      },
      "setCollateralParameters(uint256,uint256,uint256,address,address)": {
        "params": {
          "_liquidationProtocolFeeRate": "The liquidation fee rate received by protocol",
          "_liquidationThresholdRate": "The auto liquidation threshold rate",
          "_liquidatorFeeRate": "The liquidation fee rate received by liquidators",
          "_uniswapQuoter": "Uniswap quoter contract address",
          "_uniswapRouter": "Uniswap router contract address"
        }
      },
      "swapDepositAmounts(address,address,bytes32,bytes32,uint256,uint24,uint256)": {
        "params": {
          "_amountOut": "Amount to be converted to",
          "_ccyFrom": "Currency name to be converted from",
          "_ccyTo": "Currency name to be converted to",
          "_liquidator": "Liquidator's address",
          "_offsetAmount": "User's deposit amount to be offset against the reserve fund",
          "_poolFee": "Uniswap pool fee",
          "_user": "User's address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCurrency(bytes32,bool)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_isCollateral": "Boolean if the selected currency is acceptable as collateral."
        }
      },
      "withdraw(bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to withdraw.",
          "_ccy": "Currency name in bytes32"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptedContracts()": {
        "notice": "Returns contract names that can call this contract."
      },
      "getCollateralCurrencies()": {
        "notice": "Gets the currencies accepted as collateral"
      },
      "getCollateralParameters()": {
        "notice": "Gets the collateral parameters"
      },
      "getCoverage(address)": {
        "notice": "Gets the rate of collateral used."
      },
      "getDepositAmount(address,bytes32)": {
        "notice": "Gets the amount deposited in the user's collateral."
      },
      "getLiquidationAmount(address)": {
        "notice": "Gets the amount to be liquidated."
      },
      "getTokenAddress(bytes32)": {
        "notice": "Gets the token contract address"
      },
      "getTotalCollateralAmount(address)": {
        "notice": "Gets the total collateral amount."
      },
      "getTotalDepositAmount(bytes32)": {
        "notice": "Gets the total amount deposited of the selected currency"
      },
      "getUnusedCollateral(address)": {
        "notice": "Gets the total amount of the unused collateral"
      },
      "getUsedCurrencies(address)": {
        "notice": "Gets the currencies that the user used as collateral."
      },
      "getWithdrawableCollateral(address)": {
        "notice": "Gets the maximum amount of ETH that can be withdrawn from user collateral."
      },
      "initialize(address,address,uint256,uint256,uint256,address,address,address)": {
        "notice": "Initializes the contract."
      },
      "isCollateral(bytes32)": {
        "notice": "Gets if the currency is acceptable as collateral"
      },
      "isCollateral(bytes32[])": {
        "notice": "Gets if the currencies are acceptable as collateral"
      },
      "isCovered(address)": {
        "notice": "Gets if the collateral has enough coverage."
      },
      "isCovered(address,bytes32,uint256,uint8)": {
        "notice": "Gets if the collateral has enough coverage."
      },
      "isRegisteredCurrency(bytes32)": {
        "notice": "Gets if the currency has been registered"
      },
      "registerCurrency(bytes32,address,bool)": {
        "notice": "Registers new currency and sets if it is acceptable as collateral."
      },
      "removeDepositAmount(address,bytes32,uint256)": {
        "notice": "Removes deposit amount."
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "setCollateralParameters(uint256,uint256,uint256,address,address)": {
        "notice": "Sets main collateral parameters this function solves the issue of frontrunning during parameters tuning.Triggers only be contract owner"
      },
      "swapDepositAmounts(address,address,bytes32,bytes32,uint256,uint24,uint256)": {
        "notice": "Swap the deposited amount to convert to a different currency using Uniswap for liquidation."
      },
      "updateCurrency(bytes32,bool)": {
        "notice": "Updates the currency if it is acceptable as collateral."
      },
      "withdraw(bytes32,uint256)": {
        "notice": "Withdraws funds by the caller from unused collateral."
      }
    },
    "notice": "Implements the management of the token in each currency for users. This contract manages the following data related to tokens. - Deposited token amount as the collateral - Parameters related to the collateral   - Margin Call Threshold Rate   - Auto Liquidation Threshold Rate   - Liquidation Price Rate   - Min Collateral Rate To address a currency as collateral, it must be registered using `registerCurrency` method in this contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1183,
        "contract": "contracts/TokenVault.sol:TokenVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1186,
        "contract": "contracts/TokenVault.sol:TokenVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}